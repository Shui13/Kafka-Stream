// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

package com.akamai.network;

public final class Network {
  private Network() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AddressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamai.network.Address)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .akamai.network.Address.protocol_t protocol = 1;</code>
     */
    boolean hasProtocol();
    /**
     * <code>optional .akamai.network.Address.protocol_t protocol = 1;</code>
     */
    com.akamai.network.Network.Address.protocol_t getProtocol();

    /**
     * <pre>
     * IPv4 address in host-order.  ("network order" is not actually
     * portable because protobuf handles byte order conversions.)  For
     * example, 127.0.0.1 is stored as the number 0x7f000001.
     * </pre>
     *
     * <code>optional fixed32 ipv4 = 2;</code>
     */
    boolean hasIpv4();
    /**
     * <pre>
     * IPv4 address in host-order.  ("network order" is not actually
     * portable because protobuf handles byte order conversions.)  For
     * example, 127.0.0.1 is stored as the number 0x7f000001.
     * </pre>
     *
     * <code>optional fixed32 ipv4 = 2;</code>
     */
    int getIpv4();

    /**
     * <pre>
     * IPv6 address as 16-byte binary value.
     * </pre>
     *
     * <code>optional bytes ipv6 = 3;</code>
     */
    boolean hasIpv6();
    /**
     * <pre>
     * IPv6 address as 16-byte binary value.
     * </pre>
     *
     * <code>optional bytes ipv6 = 3;</code>
     */
    com.google.protobuf.ByteString getIpv6();

    /**
     * <pre>
     * Unix-domain socket (file) name.  When present, this Address
     * represents a socket address since unix-domain sockets don't have
     * a separate notion of host and port.
     * </pre>
     *
     * <code>optional bytes unix_domain_addr = 14;</code>
     */
    boolean hasUnixDomainAddr();
    /**
     * <pre>
     * Unix-domain socket (file) name.  When present, this Address
     * represents a socket address since unix-domain sockets don't have
     * a separate notion of host and port.
     * </pre>
     *
     * <code>optional bytes unix_domain_addr = 14;</code>
     */
    com.google.protobuf.ByteString getUnixDomainAddr();

    /**
     * <pre>
     * When combined with ipv4 or ipv6, this Address represents a socket
     * address (sockaddr) instead of a host.
     * </pre>
     *
     * <code>optional uint32 port = 15;</code>
     */
    boolean hasPort();
    /**
     * <pre>
     * When combined with ipv4 or ipv6, this Address represents a socket
     * address (sockaddr) instead of a host.
     * </pre>
     *
     * <code>optional uint32 port = 15;</code>
     */
    int getPort();
  }
  /**
   * <pre>
   * This message represents an IP Address, an IP Socket Address, or a
   * Unix Socket Address.  An optional protocol may be specified as
   * well.
   * </pre>
   *
   * Protobuf type {@code akamai.network.Address}
   */
  public  static final class Address extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamai.network.Address)
      AddressOrBuilder {
    // Use Address.newBuilder() to construct.
    private Address(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Address() {
      protocol_ = 1;
      ipv4_ = 0;
      ipv6_ = com.google.protobuf.ByteString.EMPTY;
      unixDomainAddr_ = com.google.protobuf.ByteString.EMPTY;
      port_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Address(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.akamai.network.Network.Address.protocol_t value = com.akamai.network.Network.Address.protocol_t.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                protocol_ = rawValue;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              ipv4_ = input.readFixed32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              ipv6_ = input.readBytes();
              break;
            }
            case 114: {
              bitField0_ |= 0x00000008;
              unixDomainAddr_ = input.readBytes();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000010;
              port_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.network.Network.internal_static_akamai_network_Address_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.network.Network.internal_static_akamai_network_Address_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.network.Network.Address.class, com.akamai.network.Network.Address.Builder.class);
    }

    /**
     * <pre>
     * Optionally specify a protocol associated with the address
     * </pre>
     *
     * Protobuf enum {@code akamai.network.Address.protocol_t}
     */
    public enum protocol_t
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TCP = 1;</code>
       */
      TCP(1),
      /**
       * <code>UDP = 2;</code>
       */
      UDP(2),
      /**
       * <code>UNIX = 3;</code>
       */
      UNIX(3),
      ;

      /**
       * <code>TCP = 1;</code>
       */
      public static final int TCP_VALUE = 1;
      /**
       * <code>UDP = 2;</code>
       */
      public static final int UDP_VALUE = 2;
      /**
       * <code>UNIX = 3;</code>
       */
      public static final int UNIX_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static protocol_t valueOf(int value) {
        return forNumber(value);
      }

      public static protocol_t forNumber(int value) {
        switch (value) {
          case 1: return TCP;
          case 2: return UDP;
          case 3: return UNIX;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<protocol_t>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          protocol_t> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<protocol_t>() {
              public protocol_t findValueByNumber(int number) {
                return protocol_t.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.akamai.network.Network.Address.getDescriptor().getEnumTypes().get(0);
      }

      private static final protocol_t[] VALUES = values();

      public static protocol_t valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private protocol_t(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:akamai.network.Address.protocol_t)
    }

    private int bitField0_;
    public static final int PROTOCOL_FIELD_NUMBER = 1;
    private int protocol_;
    /**
     * <code>optional .akamai.network.Address.protocol_t protocol = 1;</code>
     */
    public boolean hasProtocol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .akamai.network.Address.protocol_t protocol = 1;</code>
     */
    public com.akamai.network.Network.Address.protocol_t getProtocol() {
      com.akamai.network.Network.Address.protocol_t result = com.akamai.network.Network.Address.protocol_t.valueOf(protocol_);
      return result == null ? com.akamai.network.Network.Address.protocol_t.TCP : result;
    }

    public static final int IPV4_FIELD_NUMBER = 2;
    private int ipv4_;
    /**
     * <pre>
     * IPv4 address in host-order.  ("network order" is not actually
     * portable because protobuf handles byte order conversions.)  For
     * example, 127.0.0.1 is stored as the number 0x7f000001.
     * </pre>
     *
     * <code>optional fixed32 ipv4 = 2;</code>
     */
    public boolean hasIpv4() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * IPv4 address in host-order.  ("network order" is not actually
     * portable because protobuf handles byte order conversions.)  For
     * example, 127.0.0.1 is stored as the number 0x7f000001.
     * </pre>
     *
     * <code>optional fixed32 ipv4 = 2;</code>
     */
    public int getIpv4() {
      return ipv4_;
    }

    public static final int IPV6_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString ipv6_;
    /**
     * <pre>
     * IPv6 address as 16-byte binary value.
     * </pre>
     *
     * <code>optional bytes ipv6 = 3;</code>
     */
    public boolean hasIpv6() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * IPv6 address as 16-byte binary value.
     * </pre>
     *
     * <code>optional bytes ipv6 = 3;</code>
     */
    public com.google.protobuf.ByteString getIpv6() {
      return ipv6_;
    }

    public static final int UNIX_DOMAIN_ADDR_FIELD_NUMBER = 14;
    private com.google.protobuf.ByteString unixDomainAddr_;
    /**
     * <pre>
     * Unix-domain socket (file) name.  When present, this Address
     * represents a socket address since unix-domain sockets don't have
     * a separate notion of host and port.
     * </pre>
     *
     * <code>optional bytes unix_domain_addr = 14;</code>
     */
    public boolean hasUnixDomainAddr() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Unix-domain socket (file) name.  When present, this Address
     * represents a socket address since unix-domain sockets don't have
     * a separate notion of host and port.
     * </pre>
     *
     * <code>optional bytes unix_domain_addr = 14;</code>
     */
    public com.google.protobuf.ByteString getUnixDomainAddr() {
      return unixDomainAddr_;
    }

    public static final int PORT_FIELD_NUMBER = 15;
    private int port_;
    /**
     * <pre>
     * When combined with ipv4 or ipv6, this Address represents a socket
     * address (sockaddr) instead of a host.
     * </pre>
     *
     * <code>optional uint32 port = 15;</code>
     */
    public boolean hasPort() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * When combined with ipv4 or ipv6, this Address represents a socket
     * address (sockaddr) instead of a host.
     * </pre>
     *
     * <code>optional uint32 port = 15;</code>
     */
    public int getPort() {
      return port_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, protocol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed32(2, ipv4_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, ipv6_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(14, unixDomainAddr_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(15, port_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, protocol_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, ipv4_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, ipv6_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(14, unixDomainAddr_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, port_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.network.Network.Address)) {
        return super.equals(obj);
      }
      com.akamai.network.Network.Address other = (com.akamai.network.Network.Address) obj;

      boolean result = true;
      result = result && (hasProtocol() == other.hasProtocol());
      if (hasProtocol()) {
        result = result && protocol_ == other.protocol_;
      }
      result = result && (hasIpv4() == other.hasIpv4());
      if (hasIpv4()) {
        result = result && (getIpv4()
            == other.getIpv4());
      }
      result = result && (hasIpv6() == other.hasIpv6());
      if (hasIpv6()) {
        result = result && getIpv6()
            .equals(other.getIpv6());
      }
      result = result && (hasUnixDomainAddr() == other.hasUnixDomainAddr());
      if (hasUnixDomainAddr()) {
        result = result && getUnixDomainAddr()
            .equals(other.getUnixDomainAddr());
      }
      result = result && (hasPort() == other.hasPort());
      if (hasPort()) {
        result = result && (getPort()
            == other.getPort());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasProtocol()) {
        hash = (37 * hash) + PROTOCOL_FIELD_NUMBER;
        hash = (53 * hash) + protocol_;
      }
      if (hasIpv4()) {
        hash = (37 * hash) + IPV4_FIELD_NUMBER;
        hash = (53 * hash) + getIpv4();
      }
      if (hasIpv6()) {
        hash = (37 * hash) + IPV6_FIELD_NUMBER;
        hash = (53 * hash) + getIpv6().hashCode();
      }
      if (hasUnixDomainAddr()) {
        hash = (37 * hash) + UNIX_DOMAIN_ADDR_FIELD_NUMBER;
        hash = (53 * hash) + getUnixDomainAddr().hashCode();
      }
      if (hasPort()) {
        hash = (37 * hash) + PORT_FIELD_NUMBER;
        hash = (53 * hash) + getPort();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.network.Network.Address parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.network.Network.Address parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.network.Network.Address parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.network.Network.Address parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.network.Network.Address parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.network.Network.Address parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.network.Network.Address parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.network.Network.Address parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.network.Network.Address parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.network.Network.Address parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.network.Network.Address prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This message represents an IP Address, an IP Socket Address, or a
     * Unix Socket Address.  An optional protocol may be specified as
     * well.
     * </pre>
     *
     * Protobuf type {@code akamai.network.Address}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamai.network.Address)
        com.akamai.network.Network.AddressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.network.Network.internal_static_akamai_network_Address_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.network.Network.internal_static_akamai_network_Address_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.network.Network.Address.class, com.akamai.network.Network.Address.Builder.class);
      }

      // Construct using com.akamai.network.Network.Address.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        protocol_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        ipv4_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        ipv6_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        unixDomainAddr_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        port_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.network.Network.internal_static_akamai_network_Address_descriptor;
      }

      public com.akamai.network.Network.Address getDefaultInstanceForType() {
        return com.akamai.network.Network.Address.getDefaultInstance();
      }

      public com.akamai.network.Network.Address build() {
        com.akamai.network.Network.Address result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.network.Network.Address buildPartial() {
        com.akamai.network.Network.Address result = new com.akamai.network.Network.Address(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.protocol_ = protocol_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.ipv4_ = ipv4_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ipv6_ = ipv6_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.unixDomainAddr_ = unixDomainAddr_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.port_ = port_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.network.Network.Address) {
          return mergeFrom((com.akamai.network.Network.Address)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.network.Network.Address other) {
        if (other == com.akamai.network.Network.Address.getDefaultInstance()) return this;
        if (other.hasProtocol()) {
          setProtocol(other.getProtocol());
        }
        if (other.hasIpv4()) {
          setIpv4(other.getIpv4());
        }
        if (other.hasIpv6()) {
          setIpv6(other.getIpv6());
        }
        if (other.hasUnixDomainAddr()) {
          setUnixDomainAddr(other.getUnixDomainAddr());
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.network.Network.Address parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.network.Network.Address) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int protocol_ = 1;
      /**
       * <code>optional .akamai.network.Address.protocol_t protocol = 1;</code>
       */
      public boolean hasProtocol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .akamai.network.Address.protocol_t protocol = 1;</code>
       */
      public com.akamai.network.Network.Address.protocol_t getProtocol() {
        com.akamai.network.Network.Address.protocol_t result = com.akamai.network.Network.Address.protocol_t.valueOf(protocol_);
        return result == null ? com.akamai.network.Network.Address.protocol_t.TCP : result;
      }
      /**
       * <code>optional .akamai.network.Address.protocol_t protocol = 1;</code>
       */
      public Builder setProtocol(com.akamai.network.Network.Address.protocol_t value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        protocol_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .akamai.network.Address.protocol_t protocol = 1;</code>
       */
      public Builder clearProtocol() {
        bitField0_ = (bitField0_ & ~0x00000001);
        protocol_ = 1;
        onChanged();
        return this;
      }

      private int ipv4_ ;
      /**
       * <pre>
       * IPv4 address in host-order.  ("network order" is not actually
       * portable because protobuf handles byte order conversions.)  For
       * example, 127.0.0.1 is stored as the number 0x7f000001.
       * </pre>
       *
       * <code>optional fixed32 ipv4 = 2;</code>
       */
      public boolean hasIpv4() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * IPv4 address in host-order.  ("network order" is not actually
       * portable because protobuf handles byte order conversions.)  For
       * example, 127.0.0.1 is stored as the number 0x7f000001.
       * </pre>
       *
       * <code>optional fixed32 ipv4 = 2;</code>
       */
      public int getIpv4() {
        return ipv4_;
      }
      /**
       * <pre>
       * IPv4 address in host-order.  ("network order" is not actually
       * portable because protobuf handles byte order conversions.)  For
       * example, 127.0.0.1 is stored as the number 0x7f000001.
       * </pre>
       *
       * <code>optional fixed32 ipv4 = 2;</code>
       */
      public Builder setIpv4(int value) {
        bitField0_ |= 0x00000002;
        ipv4_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * IPv4 address in host-order.  ("network order" is not actually
       * portable because protobuf handles byte order conversions.)  For
       * example, 127.0.0.1 is stored as the number 0x7f000001.
       * </pre>
       *
       * <code>optional fixed32 ipv4 = 2;</code>
       */
      public Builder clearIpv4() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ipv4_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString ipv6_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * IPv6 address as 16-byte binary value.
       * </pre>
       *
       * <code>optional bytes ipv6 = 3;</code>
       */
      public boolean hasIpv6() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * IPv6 address as 16-byte binary value.
       * </pre>
       *
       * <code>optional bytes ipv6 = 3;</code>
       */
      public com.google.protobuf.ByteString getIpv6() {
        return ipv6_;
      }
      /**
       * <pre>
       * IPv6 address as 16-byte binary value.
       * </pre>
       *
       * <code>optional bytes ipv6 = 3;</code>
       */
      public Builder setIpv6(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        ipv6_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * IPv6 address as 16-byte binary value.
       * </pre>
       *
       * <code>optional bytes ipv6 = 3;</code>
       */
      public Builder clearIpv6() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ipv6_ = getDefaultInstance().getIpv6();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString unixDomainAddr_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Unix-domain socket (file) name.  When present, this Address
       * represents a socket address since unix-domain sockets don't have
       * a separate notion of host and port.
       * </pre>
       *
       * <code>optional bytes unix_domain_addr = 14;</code>
       */
      public boolean hasUnixDomainAddr() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Unix-domain socket (file) name.  When present, this Address
       * represents a socket address since unix-domain sockets don't have
       * a separate notion of host and port.
       * </pre>
       *
       * <code>optional bytes unix_domain_addr = 14;</code>
       */
      public com.google.protobuf.ByteString getUnixDomainAddr() {
        return unixDomainAddr_;
      }
      /**
       * <pre>
       * Unix-domain socket (file) name.  When present, this Address
       * represents a socket address since unix-domain sockets don't have
       * a separate notion of host and port.
       * </pre>
       *
       * <code>optional bytes unix_domain_addr = 14;</code>
       */
      public Builder setUnixDomainAddr(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        unixDomainAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unix-domain socket (file) name.  When present, this Address
       * represents a socket address since unix-domain sockets don't have
       * a separate notion of host and port.
       * </pre>
       *
       * <code>optional bytes unix_domain_addr = 14;</code>
       */
      public Builder clearUnixDomainAddr() {
        bitField0_ = (bitField0_ & ~0x00000008);
        unixDomainAddr_ = getDefaultInstance().getUnixDomainAddr();
        onChanged();
        return this;
      }

      private int port_ ;
      /**
       * <pre>
       * When combined with ipv4 or ipv6, this Address represents a socket
       * address (sockaddr) instead of a host.
       * </pre>
       *
       * <code>optional uint32 port = 15;</code>
       */
      public boolean hasPort() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * When combined with ipv4 or ipv6, this Address represents a socket
       * address (sockaddr) instead of a host.
       * </pre>
       *
       * <code>optional uint32 port = 15;</code>
       */
      public int getPort() {
        return port_;
      }
      /**
       * <pre>
       * When combined with ipv4 or ipv6, this Address represents a socket
       * address (sockaddr) instead of a host.
       * </pre>
       *
       * <code>optional uint32 port = 15;</code>
       */
      public Builder setPort(int value) {
        bitField0_ |= 0x00000010;
        port_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When combined with ipv4 or ipv6, this Address represents a socket
       * address (sockaddr) instead of a host.
       * </pre>
       *
       * <code>optional uint32 port = 15;</code>
       */
      public Builder clearPort() {
        bitField0_ = (bitField0_ & ~0x00000010);
        port_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamai.network.Address)
    }

    // @@protoc_insertion_point(class_scope:akamai.network.Address)
    private static final com.akamai.network.Network.Address DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.network.Network.Address();
    }

    public static com.akamai.network.Network.Address getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Address>
        PARSER = new com.google.protobuf.AbstractParser<Address>() {
      public Address parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Address(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Address> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Address> getParserForType() {
      return PARSER;
    }

    public com.akamai.network.Network.Address getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamai_network_Address_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamai_network_Address_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rnetwork.proto\022\016akamai.network\"\255\001\n\007Addr" +
      "ess\0224\n\010protocol\030\001 \001(\0162\".akamai.network.A" +
      "ddress.protocol_t\022\014\n\004ipv4\030\002 \001(\007\022\014\n\004ipv6\030" +
      "\003 \001(\014\022\030\n\020unix_domain_addr\030\016 \001(\014\022\014\n\004port\030" +
      "\017 \001(\r\"(\n\nprotocol_t\022\007\n\003TCP\020\001\022\007\n\003UDP\020\002\022\010\n" +
      "\004UNIX\020\003B\024\n\022com.akamai.network"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_akamai_network_Address_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_akamai_network_Address_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamai_network_Address_descriptor,
        new java.lang.String[] { "Protocol", "Ipv4", "Ipv6", "UnixDomainAddr", "Port", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
