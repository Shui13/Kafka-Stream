// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

package com.akamai.akamill.stream;

public final class Stream {
  private Stream() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface HashInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamill.stream.HashInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .akamill.stream.HashInfo.HashId hashid = 1;</code>
     */
    boolean hasHashid();
    /**
     * <code>required .akamill.stream.HashInfo.HashId hashid = 1;</code>
     */
    com.akamai.akamill.stream.Stream.HashInfo.HashId getHashid();

    /**
     * <code>repeated uint64 seed = 2;</code>
     */
    java.util.List<java.lang.Long> getSeedList();
    /**
     * <code>repeated uint64 seed = 2;</code>
     */
    int getSeedCount();
    /**
     * <code>repeated uint64 seed = 2;</code>
     */
    long getSeed(int index);
  }
  /**
   * Protobuf type {@code akamill.stream.HashInfo}
   */
  public  static final class HashInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamill.stream.HashInfo)
      HashInfoOrBuilder {
    // Use HashInfo.newBuilder() to construct.
    private HashInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HashInfo() {
      hashid_ = 1;
      seed_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HashInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.akamai.akamill.stream.Stream.HashInfo.HashId value = com.akamai.akamill.stream.Stream.HashInfo.HashId.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                hashid_ = rawValue;
              }
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                seed_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              seed_.add(input.readUInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                seed_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                seed_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          seed_ = java.util.Collections.unmodifiableList(seed_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HashInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HashInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.akamill.stream.Stream.HashInfo.class, com.akamai.akamill.stream.Stream.HashInfo.Builder.class);
    }

    /**
     * Protobuf enum {@code akamill.stream.HashInfo.HashId}
     */
    public enum HashId
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HASH_JENKINS32 = 1;</code>
       */
      HASH_JENKINS32(1),
      /**
       * <code>HASH_JENKINS64 = 2;</code>
       */
      HASH_JENKINS64(2),
      /**
       * <code>HASH_CITY32 = 3;</code>
       */
      HASH_CITY32(3),
      /**
       * <code>HASH_CITY64 = 4;</code>
       */
      HASH_CITY64(4),
      ;

      /**
       * <code>HASH_JENKINS32 = 1;</code>
       */
      public static final int HASH_JENKINS32_VALUE = 1;
      /**
       * <code>HASH_JENKINS64 = 2;</code>
       */
      public static final int HASH_JENKINS64_VALUE = 2;
      /**
       * <code>HASH_CITY32 = 3;</code>
       */
      public static final int HASH_CITY32_VALUE = 3;
      /**
       * <code>HASH_CITY64 = 4;</code>
       */
      public static final int HASH_CITY64_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static HashId valueOf(int value) {
        return forNumber(value);
      }

      public static HashId forNumber(int value) {
        switch (value) {
          case 1: return HASH_JENKINS32;
          case 2: return HASH_JENKINS64;
          case 3: return HASH_CITY32;
          case 4: return HASH_CITY64;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<HashId>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          HashId> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<HashId>() {
              public HashId findValueByNumber(int number) {
                return HashId.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.HashInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final HashId[] VALUES = values();

      public static HashId valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private HashId(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:akamill.stream.HashInfo.HashId)
    }

    private int bitField0_;
    public static final int HASHID_FIELD_NUMBER = 1;
    private int hashid_;
    /**
     * <code>required .akamill.stream.HashInfo.HashId hashid = 1;</code>
     */
    public boolean hasHashid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .akamill.stream.HashInfo.HashId hashid = 1;</code>
     */
    public com.akamai.akamill.stream.Stream.HashInfo.HashId getHashid() {
      com.akamai.akamill.stream.Stream.HashInfo.HashId result = com.akamai.akamill.stream.Stream.HashInfo.HashId.valueOf(hashid_);
      return result == null ? com.akamai.akamill.stream.Stream.HashInfo.HashId.HASH_JENKINS32 : result;
    }

    public static final int SEED_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> seed_;
    /**
     * <code>repeated uint64 seed = 2;</code>
     */
    public java.util.List<java.lang.Long>
        getSeedList() {
      return seed_;
    }
    /**
     * <code>repeated uint64 seed = 2;</code>
     */
    public int getSeedCount() {
      return seed_.size();
    }
    /**
     * <code>repeated uint64 seed = 2;</code>
     */
    public long getSeed(int index) {
      return seed_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasHashid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, hashid_);
      }
      for (int i = 0; i < seed_.size(); i++) {
        output.writeUInt64(2, seed_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, hashid_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < seed_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(seed_.get(i));
        }
        size += dataSize;
        size += 1 * getSeedList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.akamill.stream.Stream.HashInfo)) {
        return super.equals(obj);
      }
      com.akamai.akamill.stream.Stream.HashInfo other = (com.akamai.akamill.stream.Stream.HashInfo) obj;

      boolean result = true;
      result = result && (hasHashid() == other.hasHashid());
      if (hasHashid()) {
        result = result && hashid_ == other.hashid_;
      }
      result = result && getSeedList()
          .equals(other.getSeedList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHashid()) {
        hash = (37 * hash) + HASHID_FIELD_NUMBER;
        hash = (53 * hash) + hashid_;
      }
      if (getSeedCount() > 0) {
        hash = (37 * hash) + SEED_FIELD_NUMBER;
        hash = (53 * hash) + getSeedList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.akamill.stream.Stream.HashInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.HashInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.akamill.stream.Stream.HashInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code akamill.stream.HashInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamill.stream.HashInfo)
        com.akamai.akamill.stream.Stream.HashInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HashInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HashInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.akamill.stream.Stream.HashInfo.class, com.akamai.akamill.stream.Stream.HashInfo.Builder.class);
      }

      // Construct using com.akamai.akamill.stream.Stream.HashInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        hashid_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        seed_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HashInfo_descriptor;
      }

      public com.akamai.akamill.stream.Stream.HashInfo getDefaultInstanceForType() {
        return com.akamai.akamill.stream.Stream.HashInfo.getDefaultInstance();
      }

      public com.akamai.akamill.stream.Stream.HashInfo build() {
        com.akamai.akamill.stream.Stream.HashInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.akamill.stream.Stream.HashInfo buildPartial() {
        com.akamai.akamill.stream.Stream.HashInfo result = new com.akamai.akamill.stream.Stream.HashInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hashid_ = hashid_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          seed_ = java.util.Collections.unmodifiableList(seed_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.seed_ = seed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.akamill.stream.Stream.HashInfo) {
          return mergeFrom((com.akamai.akamill.stream.Stream.HashInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.akamill.stream.Stream.HashInfo other) {
        if (other == com.akamai.akamill.stream.Stream.HashInfo.getDefaultInstance()) return this;
        if (other.hasHashid()) {
          setHashid(other.getHashid());
        }
        if (!other.seed_.isEmpty()) {
          if (seed_.isEmpty()) {
            seed_ = other.seed_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSeedIsMutable();
            seed_.addAll(other.seed_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHashid()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.akamill.stream.Stream.HashInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.akamill.stream.Stream.HashInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int hashid_ = 1;
      /**
       * <code>required .akamill.stream.HashInfo.HashId hashid = 1;</code>
       */
      public boolean hasHashid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .akamill.stream.HashInfo.HashId hashid = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.HashInfo.HashId getHashid() {
        com.akamai.akamill.stream.Stream.HashInfo.HashId result = com.akamai.akamill.stream.Stream.HashInfo.HashId.valueOf(hashid_);
        return result == null ? com.akamai.akamill.stream.Stream.HashInfo.HashId.HASH_JENKINS32 : result;
      }
      /**
       * <code>required .akamill.stream.HashInfo.HashId hashid = 1;</code>
       */
      public Builder setHashid(com.akamai.akamill.stream.Stream.HashInfo.HashId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        hashid_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>required .akamill.stream.HashInfo.HashId hashid = 1;</code>
       */
      public Builder clearHashid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hashid_ = 1;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> seed_ = java.util.Collections.emptyList();
      private void ensureSeedIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          seed_ = new java.util.ArrayList<java.lang.Long>(seed_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint64 seed = 2;</code>
       */
      public java.util.List<java.lang.Long>
          getSeedList() {
        return java.util.Collections.unmodifiableList(seed_);
      }
      /**
       * <code>repeated uint64 seed = 2;</code>
       */
      public int getSeedCount() {
        return seed_.size();
      }
      /**
       * <code>repeated uint64 seed = 2;</code>
       */
      public long getSeed(int index) {
        return seed_.get(index);
      }
      /**
       * <code>repeated uint64 seed = 2;</code>
       */
      public Builder setSeed(
          int index, long value) {
        ensureSeedIsMutable();
        seed_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 seed = 2;</code>
       */
      public Builder addSeed(long value) {
        ensureSeedIsMutable();
        seed_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 seed = 2;</code>
       */
      public Builder addAllSeed(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureSeedIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, seed_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 seed = 2;</code>
       */
      public Builder clearSeed() {
        seed_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamill.stream.HashInfo)
    }

    // @@protoc_insertion_point(class_scope:akamill.stream.HashInfo)
    private static final com.akamai.akamill.stream.Stream.HashInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.akamill.stream.Stream.HashInfo();
    }

    public static com.akamai.akamill.stream.Stream.HashInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<HashInfo>
        PARSER = new com.google.protobuf.AbstractParser<HashInfo>() {
      public HashInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new HashInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HashInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HashInfo> getParserForType() {
      return PARSER;
    }

    public com.akamai.akamill.stream.Stream.HashInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HyperLogLogOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamill.stream.HyperLogLog)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 nprefixbits = 1;</code>
     */
    boolean hasNprefixbits();
    /**
     * <code>required uint32 nprefixbits = 1;</code>
     */
    int getNprefixbits();

    /**
     * <code>required uint32 nregisters = 2;</code>
     */
    boolean hasNregisters();
    /**
     * <code>required uint32 nregisters = 2;</code>
     */
    int getNregisters();

    /**
     * <code>required uint32 knearest = 3;</code>
     */
    boolean hasKnearest();
    /**
     * <code>required uint32 knearest = 3;</code>
     */
    int getKnearest();

    /**
     * <code>required bytes registerfile = 6;</code>
     */
    boolean hasRegisterfile();
    /**
     * <code>required bytes registerfile = 6;</code>
     */
    com.google.protobuf.ByteString getRegisterfile();

    /**
     * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
     */
    boolean hasHashinfo();
    /**
     * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
     */
    com.akamai.akamill.stream.Stream.HashInfo getHashinfo();
    /**
     * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
     */
    com.akamai.akamill.stream.Stream.HashInfoOrBuilder getHashinfoOrBuilder();
  }
  /**
   * Protobuf type {@code akamill.stream.HyperLogLog}
   */
  public  static final class HyperLogLog extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamill.stream.HyperLogLog)
      HyperLogLogOrBuilder {
    // Use HyperLogLog.newBuilder() to construct.
    private HyperLogLog(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HyperLogLog() {
      nprefixbits_ = 0;
      nregisters_ = 0;
      knearest_ = 0;
      registerfile_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HyperLogLog(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              nprefixbits_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              nregisters_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              knearest_ = input.readUInt32();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000008;
              registerfile_ = input.readBytes();
              break;
            }
            case 58: {
              com.akamai.akamill.stream.Stream.HashInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = hashinfo_.toBuilder();
              }
              hashinfo_ = input.readMessage(com.akamai.akamill.stream.Stream.HashInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hashinfo_);
                hashinfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HyperLogLog_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HyperLogLog_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.akamill.stream.Stream.HyperLogLog.class, com.akamai.akamill.stream.Stream.HyperLogLog.Builder.class);
    }

    private int bitField0_;
    public static final int NPREFIXBITS_FIELD_NUMBER = 1;
    private int nprefixbits_;
    /**
     * <code>required uint32 nprefixbits = 1;</code>
     */
    public boolean hasNprefixbits() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 nprefixbits = 1;</code>
     */
    public int getNprefixbits() {
      return nprefixbits_;
    }

    public static final int NREGISTERS_FIELD_NUMBER = 2;
    private int nregisters_;
    /**
     * <code>required uint32 nregisters = 2;</code>
     */
    public boolean hasNregisters() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 nregisters = 2;</code>
     */
    public int getNregisters() {
      return nregisters_;
    }

    public static final int KNEAREST_FIELD_NUMBER = 3;
    private int knearest_;
    /**
     * <code>required uint32 knearest = 3;</code>
     */
    public boolean hasKnearest() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 knearest = 3;</code>
     */
    public int getKnearest() {
      return knearest_;
    }

    public static final int REGISTERFILE_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString registerfile_;
    /**
     * <code>required bytes registerfile = 6;</code>
     */
    public boolean hasRegisterfile() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bytes registerfile = 6;</code>
     */
    public com.google.protobuf.ByteString getRegisterfile() {
      return registerfile_;
    }

    public static final int HASHINFO_FIELD_NUMBER = 7;
    private com.akamai.akamill.stream.Stream.HashInfo hashinfo_;
    /**
     * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
     */
    public boolean hasHashinfo() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
     */
    public com.akamai.akamill.stream.Stream.HashInfo getHashinfo() {
      return hashinfo_ == null ? com.akamai.akamill.stream.Stream.HashInfo.getDefaultInstance() : hashinfo_;
    }
    /**
     * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
     */
    public com.akamai.akamill.stream.Stream.HashInfoOrBuilder getHashinfoOrBuilder() {
      return hashinfo_ == null ? com.akamai.akamill.stream.Stream.HashInfo.getDefaultInstance() : hashinfo_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNprefixbits()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNregisters()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKnearest()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRegisterfile()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHashinfo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getHashinfo().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, nprefixbits_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, nregisters_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, knearest_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(6, registerfile_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(7, getHashinfo());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, nprefixbits_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, nregisters_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, knearest_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, registerfile_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getHashinfo());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.akamill.stream.Stream.HyperLogLog)) {
        return super.equals(obj);
      }
      com.akamai.akamill.stream.Stream.HyperLogLog other = (com.akamai.akamill.stream.Stream.HyperLogLog) obj;

      boolean result = true;
      result = result && (hasNprefixbits() == other.hasNprefixbits());
      if (hasNprefixbits()) {
        result = result && (getNprefixbits()
            == other.getNprefixbits());
      }
      result = result && (hasNregisters() == other.hasNregisters());
      if (hasNregisters()) {
        result = result && (getNregisters()
            == other.getNregisters());
      }
      result = result && (hasKnearest() == other.hasKnearest());
      if (hasKnearest()) {
        result = result && (getKnearest()
            == other.getKnearest());
      }
      result = result && (hasRegisterfile() == other.hasRegisterfile());
      if (hasRegisterfile()) {
        result = result && getRegisterfile()
            .equals(other.getRegisterfile());
      }
      result = result && (hasHashinfo() == other.hasHashinfo());
      if (hasHashinfo()) {
        result = result && getHashinfo()
            .equals(other.getHashinfo());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNprefixbits()) {
        hash = (37 * hash) + NPREFIXBITS_FIELD_NUMBER;
        hash = (53 * hash) + getNprefixbits();
      }
      if (hasNregisters()) {
        hash = (37 * hash) + NREGISTERS_FIELD_NUMBER;
        hash = (53 * hash) + getNregisters();
      }
      if (hasKnearest()) {
        hash = (37 * hash) + KNEAREST_FIELD_NUMBER;
        hash = (53 * hash) + getKnearest();
      }
      if (hasRegisterfile()) {
        hash = (37 * hash) + REGISTERFILE_FIELD_NUMBER;
        hash = (53 * hash) + getRegisterfile().hashCode();
      }
      if (hasHashinfo()) {
        hash = (37 * hash) + HASHINFO_FIELD_NUMBER;
        hash = (53 * hash) + getHashinfo().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.akamill.stream.Stream.HyperLogLog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.HyperLogLog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.akamill.stream.Stream.HyperLogLog prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code akamill.stream.HyperLogLog}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamill.stream.HyperLogLog)
        com.akamai.akamill.stream.Stream.HyperLogLogOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HyperLogLog_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HyperLogLog_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.akamill.stream.Stream.HyperLogLog.class, com.akamai.akamill.stream.Stream.HyperLogLog.Builder.class);
      }

      // Construct using com.akamai.akamill.stream.Stream.HyperLogLog.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHashinfoFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        nprefixbits_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        nregisters_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        knearest_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        registerfile_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (hashinfoBuilder_ == null) {
          hashinfo_ = null;
        } else {
          hashinfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_HyperLogLog_descriptor;
      }

      public com.akamai.akamill.stream.Stream.HyperLogLog getDefaultInstanceForType() {
        return com.akamai.akamill.stream.Stream.HyperLogLog.getDefaultInstance();
      }

      public com.akamai.akamill.stream.Stream.HyperLogLog build() {
        com.akamai.akamill.stream.Stream.HyperLogLog result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.akamill.stream.Stream.HyperLogLog buildPartial() {
        com.akamai.akamill.stream.Stream.HyperLogLog result = new com.akamai.akamill.stream.Stream.HyperLogLog(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.nprefixbits_ = nprefixbits_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.nregisters_ = nregisters_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.knearest_ = knearest_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.registerfile_ = registerfile_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (hashinfoBuilder_ == null) {
          result.hashinfo_ = hashinfo_;
        } else {
          result.hashinfo_ = hashinfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.akamill.stream.Stream.HyperLogLog) {
          return mergeFrom((com.akamai.akamill.stream.Stream.HyperLogLog)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.akamill.stream.Stream.HyperLogLog other) {
        if (other == com.akamai.akamill.stream.Stream.HyperLogLog.getDefaultInstance()) return this;
        if (other.hasNprefixbits()) {
          setNprefixbits(other.getNprefixbits());
        }
        if (other.hasNregisters()) {
          setNregisters(other.getNregisters());
        }
        if (other.hasKnearest()) {
          setKnearest(other.getKnearest());
        }
        if (other.hasRegisterfile()) {
          setRegisterfile(other.getRegisterfile());
        }
        if (other.hasHashinfo()) {
          mergeHashinfo(other.getHashinfo());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasNprefixbits()) {
          return false;
        }
        if (!hasNregisters()) {
          return false;
        }
        if (!hasKnearest()) {
          return false;
        }
        if (!hasRegisterfile()) {
          return false;
        }
        if (!hasHashinfo()) {
          return false;
        }
        if (!getHashinfo().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.akamill.stream.Stream.HyperLogLog parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.akamill.stream.Stream.HyperLogLog) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int nprefixbits_ ;
      /**
       * <code>required uint32 nprefixbits = 1;</code>
       */
      public boolean hasNprefixbits() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 nprefixbits = 1;</code>
       */
      public int getNprefixbits() {
        return nprefixbits_;
      }
      /**
       * <code>required uint32 nprefixbits = 1;</code>
       */
      public Builder setNprefixbits(int value) {
        bitField0_ |= 0x00000001;
        nprefixbits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 nprefixbits = 1;</code>
       */
      public Builder clearNprefixbits() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nprefixbits_ = 0;
        onChanged();
        return this;
      }

      private int nregisters_ ;
      /**
       * <code>required uint32 nregisters = 2;</code>
       */
      public boolean hasNregisters() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 nregisters = 2;</code>
       */
      public int getNregisters() {
        return nregisters_;
      }
      /**
       * <code>required uint32 nregisters = 2;</code>
       */
      public Builder setNregisters(int value) {
        bitField0_ |= 0x00000002;
        nregisters_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 nregisters = 2;</code>
       */
      public Builder clearNregisters() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nregisters_ = 0;
        onChanged();
        return this;
      }

      private int knearest_ ;
      /**
       * <code>required uint32 knearest = 3;</code>
       */
      public boolean hasKnearest() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 knearest = 3;</code>
       */
      public int getKnearest() {
        return knearest_;
      }
      /**
       * <code>required uint32 knearest = 3;</code>
       */
      public Builder setKnearest(int value) {
        bitField0_ |= 0x00000004;
        knearest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 knearest = 3;</code>
       */
      public Builder clearKnearest() {
        bitField0_ = (bitField0_ & ~0x00000004);
        knearest_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString registerfile_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes registerfile = 6;</code>
       */
      public boolean hasRegisterfile() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bytes registerfile = 6;</code>
       */
      public com.google.protobuf.ByteString getRegisterfile() {
        return registerfile_;
      }
      /**
       * <code>required bytes registerfile = 6;</code>
       */
      public Builder setRegisterfile(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        registerfile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes registerfile = 6;</code>
       */
      public Builder clearRegisterfile() {
        bitField0_ = (bitField0_ & ~0x00000008);
        registerfile_ = getDefaultInstance().getRegisterfile();
        onChanged();
        return this;
      }

      private com.akamai.akamill.stream.Stream.HashInfo hashinfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.akamai.akamill.stream.Stream.HashInfo, com.akamai.akamill.stream.Stream.HashInfo.Builder, com.akamai.akamill.stream.Stream.HashInfoOrBuilder> hashinfoBuilder_;
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      public boolean hasHashinfo() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.HashInfo getHashinfo() {
        if (hashinfoBuilder_ == null) {
          return hashinfo_ == null ? com.akamai.akamill.stream.Stream.HashInfo.getDefaultInstance() : hashinfo_;
        } else {
          return hashinfoBuilder_.getMessage();
        }
      }
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      public Builder setHashinfo(com.akamai.akamill.stream.Stream.HashInfo value) {
        if (hashinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hashinfo_ = value;
          onChanged();
        } else {
          hashinfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      public Builder setHashinfo(
          com.akamai.akamill.stream.Stream.HashInfo.Builder builderForValue) {
        if (hashinfoBuilder_ == null) {
          hashinfo_ = builderForValue.build();
          onChanged();
        } else {
          hashinfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      public Builder mergeHashinfo(com.akamai.akamill.stream.Stream.HashInfo value) {
        if (hashinfoBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              hashinfo_ != null &&
              hashinfo_ != com.akamai.akamill.stream.Stream.HashInfo.getDefaultInstance()) {
            hashinfo_ =
              com.akamai.akamill.stream.Stream.HashInfo.newBuilder(hashinfo_).mergeFrom(value).buildPartial();
          } else {
            hashinfo_ = value;
          }
          onChanged();
        } else {
          hashinfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      public Builder clearHashinfo() {
        if (hashinfoBuilder_ == null) {
          hashinfo_ = null;
          onChanged();
        } else {
          hashinfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.HashInfo.Builder getHashinfoBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getHashinfoFieldBuilder().getBuilder();
      }
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.HashInfoOrBuilder getHashinfoOrBuilder() {
        if (hashinfoBuilder_ != null) {
          return hashinfoBuilder_.getMessageOrBuilder();
        } else {
          return hashinfo_ == null ?
              com.akamai.akamill.stream.Stream.HashInfo.getDefaultInstance() : hashinfo_;
        }
      }
      /**
       * <code>required .akamill.stream.HashInfo hashinfo = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.akamai.akamill.stream.Stream.HashInfo, com.akamai.akamill.stream.Stream.HashInfo.Builder, com.akamai.akamill.stream.Stream.HashInfoOrBuilder> 
          getHashinfoFieldBuilder() {
        if (hashinfoBuilder_ == null) {
          hashinfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.akamai.akamill.stream.Stream.HashInfo, com.akamai.akamill.stream.Stream.HashInfo.Builder, com.akamai.akamill.stream.Stream.HashInfoOrBuilder>(
                  getHashinfo(),
                  getParentForChildren(),
                  isClean());
          hashinfo_ = null;
        }
        return hashinfoBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamill.stream.HyperLogLog)
    }

    // @@protoc_insertion_point(class_scope:akamill.stream.HyperLogLog)
    private static final com.akamai.akamill.stream.Stream.HyperLogLog DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.akamill.stream.Stream.HyperLogLog();
    }

    public static com.akamai.akamill.stream.Stream.HyperLogLog getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<HyperLogLog>
        PARSER = new com.google.protobuf.AbstractParser<HyperLogLog>() {
      public HyperLogLog parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new HyperLogLog(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HyperLogLog> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HyperLogLog> getParserForType() {
      return PARSER;
    }

    public com.akamai.akamill.stream.Stream.HyperLogLog getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FieldDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamill.stream.FieldData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 intf = 1;</code>
     */
    boolean hasIntf();
    /**
     * <code>optional int32 intf = 1;</code>
     */
    int getIntf();

    /**
     * <code>optional uint32 uintf = 2;</code>
     */
    boolean hasUintf();
    /**
     * <code>optional uint32 uintf = 2;</code>
     */
    int getUintf();

    /**
     * <code>optional int64 int64f = 3;</code>
     */
    boolean hasInt64F();
    /**
     * <code>optional int64 int64f = 3;</code>
     */
    long getInt64F();

    /**
     * <code>optional uint64 uint64f = 4;</code>
     */
    boolean hasUint64F();
    /**
     * <code>optional uint64 uint64f = 4;</code>
     */
    long getUint64F();

    /**
     * <code>optional .akamai.network.Address addrf = 5;</code>
     */
    boolean hasAddrf();
    /**
     * <code>optional .akamai.network.Address addrf = 5;</code>
     */
    com.akamai.network.Network.Address getAddrf();
    /**
     * <code>optional .akamai.network.Address addrf = 5;</code>
     */
    com.akamai.network.Network.AddressOrBuilder getAddrfOrBuilder();

    /**
     * <code>optional string strf = 6;</code>
     */
    boolean hasStrf();
    /**
     * <code>optional string strf = 6;</code>
     */
    java.lang.String getStrf();
    /**
     * <code>optional string strf = 6;</code>
     */
    com.google.protobuf.ByteString
        getStrfBytes();

    /**
     * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
     */
    boolean hasHllf();
    /**
     * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
     */
    com.akamai.akamill.stream.Stream.HyperLogLog getHllf();
    /**
     * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
     */
    com.akamai.akamill.stream.Stream.HyperLogLogOrBuilder getHllfOrBuilder();

    /**
     * <code>optional bytes blobf = 8;</code>
     */
    boolean hasBlobf();
    /**
     * <code>optional bytes blobf = 8;</code>
     */
    com.google.protobuf.ByteString getBlobf();

    /**
     * <code>optional double dblf = 9;</code>
     */
    boolean hasDblf();
    /**
     * <code>optional double dblf = 9;</code>
     */
    double getDblf();
  }
  /**
   * Protobuf type {@code akamill.stream.FieldData}
   */
  public  static final class FieldData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamill.stream.FieldData)
      FieldDataOrBuilder {
    // Use FieldData.newBuilder() to construct.
    private FieldData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FieldData() {
      intf_ = 0;
      uintf_ = 0;
      int64F_ = 0L;
      uint64F_ = 0L;
      strf_ = "";
      blobf_ = com.google.protobuf.ByteString.EMPTY;
      dblf_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FieldData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              intf_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              uintf_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              int64F_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              uint64F_ = input.readUInt64();
              break;
            }
            case 42: {
              com.akamai.network.Network.Address.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = addrf_.toBuilder();
              }
              addrf_ = input.readMessage(com.akamai.network.Network.Address.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(addrf_);
                addrf_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              strf_ = bs;
              break;
            }
            case 58: {
              com.akamai.akamill.stream.Stream.HyperLogLog.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = hllf_.toBuilder();
              }
              hllf_ = input.readMessage(com.akamai.akamill.stream.Stream.HyperLogLog.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hllf_);
                hllf_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              bitField0_ |= 0x00000080;
              blobf_ = input.readBytes();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              dblf_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.akamill.stream.Stream.FieldData.class, com.akamai.akamill.stream.Stream.FieldData.Builder.class);
    }

    private int bitField0_;
    public static final int INTF_FIELD_NUMBER = 1;
    private int intf_;
    /**
     * <code>optional int32 intf = 1;</code>
     */
    public boolean hasIntf() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 intf = 1;</code>
     */
    public int getIntf() {
      return intf_;
    }

    public static final int UINTF_FIELD_NUMBER = 2;
    private int uintf_;
    /**
     * <code>optional uint32 uintf = 2;</code>
     */
    public boolean hasUintf() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 uintf = 2;</code>
     */
    public int getUintf() {
      return uintf_;
    }

    public static final int INT64F_FIELD_NUMBER = 3;
    private long int64F_;
    /**
     * <code>optional int64 int64f = 3;</code>
     */
    public boolean hasInt64F() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 int64f = 3;</code>
     */
    public long getInt64F() {
      return int64F_;
    }

    public static final int UINT64F_FIELD_NUMBER = 4;
    private long uint64F_;
    /**
     * <code>optional uint64 uint64f = 4;</code>
     */
    public boolean hasUint64F() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint64 uint64f = 4;</code>
     */
    public long getUint64F() {
      return uint64F_;
    }

    public static final int ADDRF_FIELD_NUMBER = 5;
    private com.akamai.network.Network.Address addrf_;
    /**
     * <code>optional .akamai.network.Address addrf = 5;</code>
     */
    public boolean hasAddrf() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .akamai.network.Address addrf = 5;</code>
     */
    public com.akamai.network.Network.Address getAddrf() {
      return addrf_ == null ? com.akamai.network.Network.Address.getDefaultInstance() : addrf_;
    }
    /**
     * <code>optional .akamai.network.Address addrf = 5;</code>
     */
    public com.akamai.network.Network.AddressOrBuilder getAddrfOrBuilder() {
      return addrf_ == null ? com.akamai.network.Network.Address.getDefaultInstance() : addrf_;
    }

    public static final int STRF_FIELD_NUMBER = 6;
    private volatile java.lang.Object strf_;
    /**
     * <code>optional string strf = 6;</code>
     */
    public boolean hasStrf() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string strf = 6;</code>
     */
    public java.lang.String getStrf() {
      java.lang.Object ref = strf_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          strf_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string strf = 6;</code>
     */
    public com.google.protobuf.ByteString
        getStrfBytes() {
      java.lang.Object ref = strf_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        strf_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HLLF_FIELD_NUMBER = 7;
    private com.akamai.akamill.stream.Stream.HyperLogLog hllf_;
    /**
     * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
     */
    public boolean hasHllf() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
     */
    public com.akamai.akamill.stream.Stream.HyperLogLog getHllf() {
      return hllf_ == null ? com.akamai.akamill.stream.Stream.HyperLogLog.getDefaultInstance() : hllf_;
    }
    /**
     * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
     */
    public com.akamai.akamill.stream.Stream.HyperLogLogOrBuilder getHllfOrBuilder() {
      return hllf_ == null ? com.akamai.akamill.stream.Stream.HyperLogLog.getDefaultInstance() : hllf_;
    }

    public static final int BLOBF_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString blobf_;
    /**
     * <code>optional bytes blobf = 8;</code>
     */
    public boolean hasBlobf() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bytes blobf = 8;</code>
     */
    public com.google.protobuf.ByteString getBlobf() {
      return blobf_;
    }

    public static final int DBLF_FIELD_NUMBER = 9;
    private double dblf_;
    /**
     * <code>optional double dblf = 9;</code>
     */
    public boolean hasDblf() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double dblf = 9;</code>
     */
    public double getDblf() {
      return dblf_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasHllf()) {
        if (!getHllf().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, intf_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, uintf_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, int64F_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(4, uint64F_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getAddrf());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, strf_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, getHllf());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, blobf_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, dblf_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, intf_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, uintf_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, int64F_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, uint64F_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getAddrf());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, strf_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getHllf());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, blobf_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, dblf_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.akamill.stream.Stream.FieldData)) {
        return super.equals(obj);
      }
      com.akamai.akamill.stream.Stream.FieldData other = (com.akamai.akamill.stream.Stream.FieldData) obj;

      boolean result = true;
      result = result && (hasIntf() == other.hasIntf());
      if (hasIntf()) {
        result = result && (getIntf()
            == other.getIntf());
      }
      result = result && (hasUintf() == other.hasUintf());
      if (hasUintf()) {
        result = result && (getUintf()
            == other.getUintf());
      }
      result = result && (hasInt64F() == other.hasInt64F());
      if (hasInt64F()) {
        result = result && (getInt64F()
            == other.getInt64F());
      }
      result = result && (hasUint64F() == other.hasUint64F());
      if (hasUint64F()) {
        result = result && (getUint64F()
            == other.getUint64F());
      }
      result = result && (hasAddrf() == other.hasAddrf());
      if (hasAddrf()) {
        result = result && getAddrf()
            .equals(other.getAddrf());
      }
      result = result && (hasStrf() == other.hasStrf());
      if (hasStrf()) {
        result = result && getStrf()
            .equals(other.getStrf());
      }
      result = result && (hasHllf() == other.hasHllf());
      if (hasHllf()) {
        result = result && getHllf()
            .equals(other.getHllf());
      }
      result = result && (hasBlobf() == other.hasBlobf());
      if (hasBlobf()) {
        result = result && getBlobf()
            .equals(other.getBlobf());
      }
      result = result && (hasDblf() == other.hasDblf());
      if (hasDblf()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getDblf())
            == java.lang.Double.doubleToLongBits(
                other.getDblf()));
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIntf()) {
        hash = (37 * hash) + INTF_FIELD_NUMBER;
        hash = (53 * hash) + getIntf();
      }
      if (hasUintf()) {
        hash = (37 * hash) + UINTF_FIELD_NUMBER;
        hash = (53 * hash) + getUintf();
      }
      if (hasInt64F()) {
        hash = (37 * hash) + INT64F_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getInt64F());
      }
      if (hasUint64F()) {
        hash = (37 * hash) + UINT64F_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getUint64F());
      }
      if (hasAddrf()) {
        hash = (37 * hash) + ADDRF_FIELD_NUMBER;
        hash = (53 * hash) + getAddrf().hashCode();
      }
      if (hasStrf()) {
        hash = (37 * hash) + STRF_FIELD_NUMBER;
        hash = (53 * hash) + getStrf().hashCode();
      }
      if (hasHllf()) {
        hash = (37 * hash) + HLLF_FIELD_NUMBER;
        hash = (53 * hash) + getHllf().hashCode();
      }
      if (hasBlobf()) {
        hash = (37 * hash) + BLOBF_FIELD_NUMBER;
        hash = (53 * hash) + getBlobf().hashCode();
      }
      if (hasDblf()) {
        hash = (37 * hash) + DBLF_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDblf()));
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.akamill.stream.Stream.FieldData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.FieldData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.akamill.stream.Stream.FieldData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code akamill.stream.FieldData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamill.stream.FieldData)
        com.akamai.akamill.stream.Stream.FieldDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.akamill.stream.Stream.FieldData.class, com.akamai.akamill.stream.Stream.FieldData.Builder.class);
      }

      // Construct using com.akamai.akamill.stream.Stream.FieldData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAddrfFieldBuilder();
          getHllfFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        intf_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        uintf_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        int64F_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        uint64F_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (addrfBuilder_ == null) {
          addrf_ = null;
        } else {
          addrfBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        strf_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        if (hllfBuilder_ == null) {
          hllf_ = null;
        } else {
          hllfBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        blobf_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        dblf_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldData_descriptor;
      }

      public com.akamai.akamill.stream.Stream.FieldData getDefaultInstanceForType() {
        return com.akamai.akamill.stream.Stream.FieldData.getDefaultInstance();
      }

      public com.akamai.akamill.stream.Stream.FieldData build() {
        com.akamai.akamill.stream.Stream.FieldData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.akamill.stream.Stream.FieldData buildPartial() {
        com.akamai.akamill.stream.Stream.FieldData result = new com.akamai.akamill.stream.Stream.FieldData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.intf_ = intf_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.uintf_ = uintf_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.int64F_ = int64F_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.uint64F_ = uint64F_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (addrfBuilder_ == null) {
          result.addrf_ = addrf_;
        } else {
          result.addrf_ = addrfBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.strf_ = strf_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (hllfBuilder_ == null) {
          result.hllf_ = hllf_;
        } else {
          result.hllf_ = hllfBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.blobf_ = blobf_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.dblf_ = dblf_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.akamill.stream.Stream.FieldData) {
          return mergeFrom((com.akamai.akamill.stream.Stream.FieldData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.akamill.stream.Stream.FieldData other) {
        if (other == com.akamai.akamill.stream.Stream.FieldData.getDefaultInstance()) return this;
        if (other.hasIntf()) {
          setIntf(other.getIntf());
        }
        if (other.hasUintf()) {
          setUintf(other.getUintf());
        }
        if (other.hasInt64F()) {
          setInt64F(other.getInt64F());
        }
        if (other.hasUint64F()) {
          setUint64F(other.getUint64F());
        }
        if (other.hasAddrf()) {
          mergeAddrf(other.getAddrf());
        }
        if (other.hasStrf()) {
          bitField0_ |= 0x00000020;
          strf_ = other.strf_;
          onChanged();
        }
        if (other.hasHllf()) {
          mergeHllf(other.getHllf());
        }
        if (other.hasBlobf()) {
          setBlobf(other.getBlobf());
        }
        if (other.hasDblf()) {
          setDblf(other.getDblf());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (hasHllf()) {
          if (!getHllf().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.akamill.stream.Stream.FieldData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.akamill.stream.Stream.FieldData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int intf_ ;
      /**
       * <code>optional int32 intf = 1;</code>
       */
      public boolean hasIntf() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 intf = 1;</code>
       */
      public int getIntf() {
        return intf_;
      }
      /**
       * <code>optional int32 intf = 1;</code>
       */
      public Builder setIntf(int value) {
        bitField0_ |= 0x00000001;
        intf_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 intf = 1;</code>
       */
      public Builder clearIntf() {
        bitField0_ = (bitField0_ & ~0x00000001);
        intf_ = 0;
        onChanged();
        return this;
      }

      private int uintf_ ;
      /**
       * <code>optional uint32 uintf = 2;</code>
       */
      public boolean hasUintf() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 uintf = 2;</code>
       */
      public int getUintf() {
        return uintf_;
      }
      /**
       * <code>optional uint32 uintf = 2;</code>
       */
      public Builder setUintf(int value) {
        bitField0_ |= 0x00000002;
        uintf_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uintf = 2;</code>
       */
      public Builder clearUintf() {
        bitField0_ = (bitField0_ & ~0x00000002);
        uintf_ = 0;
        onChanged();
        return this;
      }

      private long int64F_ ;
      /**
       * <code>optional int64 int64f = 3;</code>
       */
      public boolean hasInt64F() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 int64f = 3;</code>
       */
      public long getInt64F() {
        return int64F_;
      }
      /**
       * <code>optional int64 int64f = 3;</code>
       */
      public Builder setInt64F(long value) {
        bitField0_ |= 0x00000004;
        int64F_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 int64f = 3;</code>
       */
      public Builder clearInt64F() {
        bitField0_ = (bitField0_ & ~0x00000004);
        int64F_ = 0L;
        onChanged();
        return this;
      }

      private long uint64F_ ;
      /**
       * <code>optional uint64 uint64f = 4;</code>
       */
      public boolean hasUint64F() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint64 uint64f = 4;</code>
       */
      public long getUint64F() {
        return uint64F_;
      }
      /**
       * <code>optional uint64 uint64f = 4;</code>
       */
      public Builder setUint64F(long value) {
        bitField0_ |= 0x00000008;
        uint64F_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 uint64f = 4;</code>
       */
      public Builder clearUint64F() {
        bitField0_ = (bitField0_ & ~0x00000008);
        uint64F_ = 0L;
        onChanged();
        return this;
      }

      private com.akamai.network.Network.Address addrf_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.akamai.network.Network.Address, com.akamai.network.Network.Address.Builder, com.akamai.network.Network.AddressOrBuilder> addrfBuilder_;
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      public boolean hasAddrf() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      public com.akamai.network.Network.Address getAddrf() {
        if (addrfBuilder_ == null) {
          return addrf_ == null ? com.akamai.network.Network.Address.getDefaultInstance() : addrf_;
        } else {
          return addrfBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      public Builder setAddrf(com.akamai.network.Network.Address value) {
        if (addrfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          addrf_ = value;
          onChanged();
        } else {
          addrfBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      public Builder setAddrf(
          com.akamai.network.Network.Address.Builder builderForValue) {
        if (addrfBuilder_ == null) {
          addrf_ = builderForValue.build();
          onChanged();
        } else {
          addrfBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      public Builder mergeAddrf(com.akamai.network.Network.Address value) {
        if (addrfBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              addrf_ != null &&
              addrf_ != com.akamai.network.Network.Address.getDefaultInstance()) {
            addrf_ =
              com.akamai.network.Network.Address.newBuilder(addrf_).mergeFrom(value).buildPartial();
          } else {
            addrf_ = value;
          }
          onChanged();
        } else {
          addrfBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      public Builder clearAddrf() {
        if (addrfBuilder_ == null) {
          addrf_ = null;
          onChanged();
        } else {
          addrfBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      public com.akamai.network.Network.Address.Builder getAddrfBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getAddrfFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      public com.akamai.network.Network.AddressOrBuilder getAddrfOrBuilder() {
        if (addrfBuilder_ != null) {
          return addrfBuilder_.getMessageOrBuilder();
        } else {
          return addrf_ == null ?
              com.akamai.network.Network.Address.getDefaultInstance() : addrf_;
        }
      }
      /**
       * <code>optional .akamai.network.Address addrf = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.akamai.network.Network.Address, com.akamai.network.Network.Address.Builder, com.akamai.network.Network.AddressOrBuilder> 
          getAddrfFieldBuilder() {
        if (addrfBuilder_ == null) {
          addrfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.akamai.network.Network.Address, com.akamai.network.Network.Address.Builder, com.akamai.network.Network.AddressOrBuilder>(
                  getAddrf(),
                  getParentForChildren(),
                  isClean());
          addrf_ = null;
        }
        return addrfBuilder_;
      }

      private java.lang.Object strf_ = "";
      /**
       * <code>optional string strf = 6;</code>
       */
      public boolean hasStrf() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string strf = 6;</code>
       */
      public java.lang.String getStrf() {
        java.lang.Object ref = strf_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            strf_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string strf = 6;</code>
       */
      public com.google.protobuf.ByteString
          getStrfBytes() {
        java.lang.Object ref = strf_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          strf_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string strf = 6;</code>
       */
      public Builder setStrf(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        strf_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string strf = 6;</code>
       */
      public Builder clearStrf() {
        bitField0_ = (bitField0_ & ~0x00000020);
        strf_ = getDefaultInstance().getStrf();
        onChanged();
        return this;
      }
      /**
       * <code>optional string strf = 6;</code>
       */
      public Builder setStrfBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        strf_ = value;
        onChanged();
        return this;
      }

      private com.akamai.akamill.stream.Stream.HyperLogLog hllf_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.akamai.akamill.stream.Stream.HyperLogLog, com.akamai.akamill.stream.Stream.HyperLogLog.Builder, com.akamai.akamill.stream.Stream.HyperLogLogOrBuilder> hllfBuilder_;
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      public boolean hasHllf() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.HyperLogLog getHllf() {
        if (hllfBuilder_ == null) {
          return hllf_ == null ? com.akamai.akamill.stream.Stream.HyperLogLog.getDefaultInstance() : hllf_;
        } else {
          return hllfBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      public Builder setHllf(com.akamai.akamill.stream.Stream.HyperLogLog value) {
        if (hllfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hllf_ = value;
          onChanged();
        } else {
          hllfBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      public Builder setHllf(
          com.akamai.akamill.stream.Stream.HyperLogLog.Builder builderForValue) {
        if (hllfBuilder_ == null) {
          hllf_ = builderForValue.build();
          onChanged();
        } else {
          hllfBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      public Builder mergeHllf(com.akamai.akamill.stream.Stream.HyperLogLog value) {
        if (hllfBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              hllf_ != null &&
              hllf_ != com.akamai.akamill.stream.Stream.HyperLogLog.getDefaultInstance()) {
            hllf_ =
              com.akamai.akamill.stream.Stream.HyperLogLog.newBuilder(hllf_).mergeFrom(value).buildPartial();
          } else {
            hllf_ = value;
          }
          onChanged();
        } else {
          hllfBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      public Builder clearHllf() {
        if (hllfBuilder_ == null) {
          hllf_ = null;
          onChanged();
        } else {
          hllfBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.HyperLogLog.Builder getHllfBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getHllfFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.HyperLogLogOrBuilder getHllfOrBuilder() {
        if (hllfBuilder_ != null) {
          return hllfBuilder_.getMessageOrBuilder();
        } else {
          return hllf_ == null ?
              com.akamai.akamill.stream.Stream.HyperLogLog.getDefaultInstance() : hllf_;
        }
      }
      /**
       * <code>optional .akamill.stream.HyperLogLog hllf = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.akamai.akamill.stream.Stream.HyperLogLog, com.akamai.akamill.stream.Stream.HyperLogLog.Builder, com.akamai.akamill.stream.Stream.HyperLogLogOrBuilder> 
          getHllfFieldBuilder() {
        if (hllfBuilder_ == null) {
          hllfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.akamai.akamill.stream.Stream.HyperLogLog, com.akamai.akamill.stream.Stream.HyperLogLog.Builder, com.akamai.akamill.stream.Stream.HyperLogLogOrBuilder>(
                  getHllf(),
                  getParentForChildren(),
                  isClean());
          hllf_ = null;
        }
        return hllfBuilder_;
      }

      private com.google.protobuf.ByteString blobf_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes blobf = 8;</code>
       */
      public boolean hasBlobf() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bytes blobf = 8;</code>
       */
      public com.google.protobuf.ByteString getBlobf() {
        return blobf_;
      }
      /**
       * <code>optional bytes blobf = 8;</code>
       */
      public Builder setBlobf(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        blobf_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes blobf = 8;</code>
       */
      public Builder clearBlobf() {
        bitField0_ = (bitField0_ & ~0x00000080);
        blobf_ = getDefaultInstance().getBlobf();
        onChanged();
        return this;
      }

      private double dblf_ ;
      /**
       * <code>optional double dblf = 9;</code>
       */
      public boolean hasDblf() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double dblf = 9;</code>
       */
      public double getDblf() {
        return dblf_;
      }
      /**
       * <code>optional double dblf = 9;</code>
       */
      public Builder setDblf(double value) {
        bitField0_ |= 0x00000100;
        dblf_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dblf = 9;</code>
       */
      public Builder clearDblf() {
        bitField0_ = (bitField0_ & ~0x00000100);
        dblf_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamill.stream.FieldData)
    }

    // @@protoc_insertion_point(class_scope:akamill.stream.FieldData)
    private static final com.akamai.akamill.stream.Stream.FieldData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.akamill.stream.Stream.FieldData();
    }

    public static com.akamai.akamill.stream.Stream.FieldData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FieldData>
        PARSER = new com.google.protobuf.AbstractParser<FieldData>() {
      public FieldData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FieldData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FieldData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FieldData> getParserForType() {
      return PARSER;
    }

    public com.akamai.akamill.stream.Stream.FieldData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FieldInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamill.stream.FieldInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .akamill.stream.FieldInfo.FieldDataType dtype = 2;</code>
     */
    boolean hasDtype();
    /**
     * <code>optional .akamill.stream.FieldInfo.FieldDataType dtype = 2;</code>
     */
    com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType getDtype();

    /**
     * <code>optional .akamill.stream.FieldInfo.FieldAggType aggtype = 3;</code>
     */
    boolean hasAggtype();
    /**
     * <code>optional .akamill.stream.FieldInfo.FieldAggType aggtype = 3;</code>
     */
    com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType getAggtype();

    /**
     * <code>optional int32 maxsamples = 4;</code>
     */
    boolean hasMaxsamples();
    /**
     * <code>optional int32 maxsamples = 4;</code>
     */
    int getMaxsamples();
  }
  /**
   * Protobuf type {@code akamill.stream.FieldInfo}
   */
  public  static final class FieldInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamill.stream.FieldInfo)
      FieldInfoOrBuilder {
    // Use FieldInfo.newBuilder() to construct.
    private FieldInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FieldInfo() {
      name_ = "";
      dtype_ = 1;
      aggtype_ = 1;
      maxsamples_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FieldInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType value = com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                dtype_ = rawValue;
              }
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType value = com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                aggtype_ = rawValue;
              }
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              maxsamples_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.akamill.stream.Stream.FieldInfo.class, com.akamai.akamill.stream.Stream.FieldInfo.Builder.class);
    }

    /**
     * Protobuf enum {@code akamill.stream.FieldInfo.FieldDataType}
     */
    public enum FieldDataType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>F_DATA_INT32 = 1;</code>
       */
      F_DATA_INT32(1),
      /**
       * <code>F_DATA_UINT32 = 2;</code>
       */
      F_DATA_UINT32(2),
      /**
       * <code>F_DATA_INT64 = 3;</code>
       */
      F_DATA_INT64(3),
      /**
       * <code>F_DATA_UINT64 = 4;</code>
       */
      F_DATA_UINT64(4),
      /**
       * <code>F_DATA_IP = 5;</code>
       */
      F_DATA_IP(5),
      /**
       * <code>F_DATA_STR = 6;</code>
       */
      F_DATA_STR(6),
      /**
       * <code>F_DATA_TIME = 7;</code>
       */
      F_DATA_TIME(7),
      /**
       * <code>F_DATA_HLL = 8;</code>
       */
      F_DATA_HLL(8),
      /**
       * <code>F_DATA_BLOB = 9;</code>
       */
      F_DATA_BLOB(9),
      /**
       * <code>F_DATA_DOUBLE = 10;</code>
       */
      F_DATA_DOUBLE(10),
      /**
       * <code>F_DATA_INVAL = 11;</code>
       */
      F_DATA_INVAL(11),
      ;

      /**
       * <code>F_DATA_INT32 = 1;</code>
       */
      public static final int F_DATA_INT32_VALUE = 1;
      /**
       * <code>F_DATA_UINT32 = 2;</code>
       */
      public static final int F_DATA_UINT32_VALUE = 2;
      /**
       * <code>F_DATA_INT64 = 3;</code>
       */
      public static final int F_DATA_INT64_VALUE = 3;
      /**
       * <code>F_DATA_UINT64 = 4;</code>
       */
      public static final int F_DATA_UINT64_VALUE = 4;
      /**
       * <code>F_DATA_IP = 5;</code>
       */
      public static final int F_DATA_IP_VALUE = 5;
      /**
       * <code>F_DATA_STR = 6;</code>
       */
      public static final int F_DATA_STR_VALUE = 6;
      /**
       * <code>F_DATA_TIME = 7;</code>
       */
      public static final int F_DATA_TIME_VALUE = 7;
      /**
       * <code>F_DATA_HLL = 8;</code>
       */
      public static final int F_DATA_HLL_VALUE = 8;
      /**
       * <code>F_DATA_BLOB = 9;</code>
       */
      public static final int F_DATA_BLOB_VALUE = 9;
      /**
       * <code>F_DATA_DOUBLE = 10;</code>
       */
      public static final int F_DATA_DOUBLE_VALUE = 10;
      /**
       * <code>F_DATA_INVAL = 11;</code>
       */
      public static final int F_DATA_INVAL_VALUE = 11;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FieldDataType valueOf(int value) {
        return forNumber(value);
      }

      public static FieldDataType forNumber(int value) {
        switch (value) {
          case 1: return F_DATA_INT32;
          case 2: return F_DATA_UINT32;
          case 3: return F_DATA_INT64;
          case 4: return F_DATA_UINT64;
          case 5: return F_DATA_IP;
          case 6: return F_DATA_STR;
          case 7: return F_DATA_TIME;
          case 8: return F_DATA_HLL;
          case 9: return F_DATA_BLOB;
          case 10: return F_DATA_DOUBLE;
          case 11: return F_DATA_INVAL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FieldDataType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FieldDataType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FieldDataType>() {
              public FieldDataType findValueByNumber(int number) {
                return FieldDataType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.FieldInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final FieldDataType[] VALUES = values();

      public static FieldDataType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FieldDataType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:akamill.stream.FieldInfo.FieldDataType)
    }

    /**
     * Protobuf enum {@code akamill.stream.FieldInfo.FieldAggType}
     */
    public enum FieldAggType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>F_AGG_NONE = 1;</code>
       */
      F_AGG_NONE(1),
      /**
       * <code>F_AGG_SUM = 2;</code>
       */
      F_AGG_SUM(2),
      /**
       * <code>F_AGG_DIFF = 3;</code>
       */
      F_AGG_DIFF(3),
      /**
       * <code>F_AGG_MAX = 4;</code>
       */
      F_AGG_MAX(4),
      /**
       * <code>F_AGG_MIN = 5;</code>
       */
      F_AGG_MIN(5),
      /**
       * <code>F_AGG_OR = 6;</code>
       */
      F_AGG_OR(6),
      /**
       * <code>F_AGG_AND = 7;</code>
       */
      F_AGG_AND(7),
      /**
       * <code>F_AGG_XOR = 8;</code>
       */
      F_AGG_XOR(8),
      /**
       * <code>F_AGG_RANDSWAP = 9;</code>
       */
      F_AGG_RANDSWAP(9),
      /**
       * <code>F_AGG_SWAP = 10;</code>
       */
      F_AGG_SWAP(10),
      /**
       * <code>F_AGG_HLL = 11;</code>
       */
      F_AGG_HLL(11),
      ;

      /**
       * <code>F_AGG_NONE = 1;</code>
       */
      public static final int F_AGG_NONE_VALUE = 1;
      /**
       * <code>F_AGG_SUM = 2;</code>
       */
      public static final int F_AGG_SUM_VALUE = 2;
      /**
       * <code>F_AGG_DIFF = 3;</code>
       */
      public static final int F_AGG_DIFF_VALUE = 3;
      /**
       * <code>F_AGG_MAX = 4;</code>
       */
      public static final int F_AGG_MAX_VALUE = 4;
      /**
       * <code>F_AGG_MIN = 5;</code>
       */
      public static final int F_AGG_MIN_VALUE = 5;
      /**
       * <code>F_AGG_OR = 6;</code>
       */
      public static final int F_AGG_OR_VALUE = 6;
      /**
       * <code>F_AGG_AND = 7;</code>
       */
      public static final int F_AGG_AND_VALUE = 7;
      /**
       * <code>F_AGG_XOR = 8;</code>
       */
      public static final int F_AGG_XOR_VALUE = 8;
      /**
       * <code>F_AGG_RANDSWAP = 9;</code>
       */
      public static final int F_AGG_RANDSWAP_VALUE = 9;
      /**
       * <code>F_AGG_SWAP = 10;</code>
       */
      public static final int F_AGG_SWAP_VALUE = 10;
      /**
       * <code>F_AGG_HLL = 11;</code>
       */
      public static final int F_AGG_HLL_VALUE = 11;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FieldAggType valueOf(int value) {
        return forNumber(value);
      }

      public static FieldAggType forNumber(int value) {
        switch (value) {
          case 1: return F_AGG_NONE;
          case 2: return F_AGG_SUM;
          case 3: return F_AGG_DIFF;
          case 4: return F_AGG_MAX;
          case 5: return F_AGG_MIN;
          case 6: return F_AGG_OR;
          case 7: return F_AGG_AND;
          case 8: return F_AGG_XOR;
          case 9: return F_AGG_RANDSWAP;
          case 10: return F_AGG_SWAP;
          case 11: return F_AGG_HLL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FieldAggType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FieldAggType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FieldAggType>() {
              public FieldAggType findValueByNumber(int number) {
                return FieldAggType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.FieldInfo.getDescriptor().getEnumTypes().get(1);
      }

      private static final FieldAggType[] VALUES = values();

      public static FieldAggType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FieldAggType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:akamill.stream.FieldInfo.FieldAggType)
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DTYPE_FIELD_NUMBER = 2;
    private int dtype_;
    /**
     * <code>optional .akamill.stream.FieldInfo.FieldDataType dtype = 2;</code>
     */
    public boolean hasDtype() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .akamill.stream.FieldInfo.FieldDataType dtype = 2;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType getDtype() {
      com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType result = com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType.valueOf(dtype_);
      return result == null ? com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType.F_DATA_INT32 : result;
    }

    public static final int AGGTYPE_FIELD_NUMBER = 3;
    private int aggtype_;
    /**
     * <code>optional .akamill.stream.FieldInfo.FieldAggType aggtype = 3;</code>
     */
    public boolean hasAggtype() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .akamill.stream.FieldInfo.FieldAggType aggtype = 3;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType getAggtype() {
      com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType result = com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType.valueOf(aggtype_);
      return result == null ? com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType.F_AGG_NONE : result;
    }

    public static final int MAXSAMPLES_FIELD_NUMBER = 4;
    private int maxsamples_;
    /**
     * <code>optional int32 maxsamples = 4;</code>
     */
    public boolean hasMaxsamples() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 maxsamples = 4;</code>
     */
    public int getMaxsamples() {
      return maxsamples_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, dtype_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, aggtype_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, maxsamples_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, dtype_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, aggtype_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, maxsamples_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.akamill.stream.Stream.FieldInfo)) {
        return super.equals(obj);
      }
      com.akamai.akamill.stream.Stream.FieldInfo other = (com.akamai.akamill.stream.Stream.FieldInfo) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasDtype() == other.hasDtype());
      if (hasDtype()) {
        result = result && dtype_ == other.dtype_;
      }
      result = result && (hasAggtype() == other.hasAggtype());
      if (hasAggtype()) {
        result = result && aggtype_ == other.aggtype_;
      }
      result = result && (hasMaxsamples() == other.hasMaxsamples());
      if (hasMaxsamples()) {
        result = result && (getMaxsamples()
            == other.getMaxsamples());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasDtype()) {
        hash = (37 * hash) + DTYPE_FIELD_NUMBER;
        hash = (53 * hash) + dtype_;
      }
      if (hasAggtype()) {
        hash = (37 * hash) + AGGTYPE_FIELD_NUMBER;
        hash = (53 * hash) + aggtype_;
      }
      if (hasMaxsamples()) {
        hash = (37 * hash) + MAXSAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getMaxsamples();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.akamill.stream.Stream.FieldInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.FieldInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.akamill.stream.Stream.FieldInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code akamill.stream.FieldInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamill.stream.FieldInfo)
        com.akamai.akamill.stream.Stream.FieldInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.akamill.stream.Stream.FieldInfo.class, com.akamai.akamill.stream.Stream.FieldInfo.Builder.class);
      }

      // Construct using com.akamai.akamill.stream.Stream.FieldInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        dtype_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        aggtype_ = 1;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxsamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_FieldInfo_descriptor;
      }

      public com.akamai.akamill.stream.Stream.FieldInfo getDefaultInstanceForType() {
        return com.akamai.akamill.stream.Stream.FieldInfo.getDefaultInstance();
      }

      public com.akamai.akamill.stream.Stream.FieldInfo build() {
        com.akamai.akamill.stream.Stream.FieldInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.akamill.stream.Stream.FieldInfo buildPartial() {
        com.akamai.akamill.stream.Stream.FieldInfo result = new com.akamai.akamill.stream.Stream.FieldInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.dtype_ = dtype_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.aggtype_ = aggtype_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxsamples_ = maxsamples_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.akamill.stream.Stream.FieldInfo) {
          return mergeFrom((com.akamai.akamill.stream.Stream.FieldInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.akamill.stream.Stream.FieldInfo other) {
        if (other == com.akamai.akamill.stream.Stream.FieldInfo.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasDtype()) {
          setDtype(other.getDtype());
        }
        if (other.hasAggtype()) {
          setAggtype(other.getAggtype());
        }
        if (other.hasMaxsamples()) {
          setMaxsamples(other.getMaxsamples());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.akamill.stream.Stream.FieldInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.akamill.stream.Stream.FieldInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private int dtype_ = 1;
      /**
       * <code>optional .akamill.stream.FieldInfo.FieldDataType dtype = 2;</code>
       */
      public boolean hasDtype() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .akamill.stream.FieldInfo.FieldDataType dtype = 2;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType getDtype() {
        com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType result = com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType.valueOf(dtype_);
        return result == null ? com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType.F_DATA_INT32 : result;
      }
      /**
       * <code>optional .akamill.stream.FieldInfo.FieldDataType dtype = 2;</code>
       */
      public Builder setDtype(com.akamai.akamill.stream.Stream.FieldInfo.FieldDataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        dtype_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .akamill.stream.FieldInfo.FieldDataType dtype = 2;</code>
       */
      public Builder clearDtype() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dtype_ = 1;
        onChanged();
        return this;
      }

      private int aggtype_ = 1;
      /**
       * <code>optional .akamill.stream.FieldInfo.FieldAggType aggtype = 3;</code>
       */
      public boolean hasAggtype() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .akamill.stream.FieldInfo.FieldAggType aggtype = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType getAggtype() {
        com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType result = com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType.valueOf(aggtype_);
        return result == null ? com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType.F_AGG_NONE : result;
      }
      /**
       * <code>optional .akamill.stream.FieldInfo.FieldAggType aggtype = 3;</code>
       */
      public Builder setAggtype(com.akamai.akamill.stream.Stream.FieldInfo.FieldAggType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        aggtype_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .akamill.stream.FieldInfo.FieldAggType aggtype = 3;</code>
       */
      public Builder clearAggtype() {
        bitField0_ = (bitField0_ & ~0x00000004);
        aggtype_ = 1;
        onChanged();
        return this;
      }

      private int maxsamples_ ;
      /**
       * <code>optional int32 maxsamples = 4;</code>
       */
      public boolean hasMaxsamples() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 maxsamples = 4;</code>
       */
      public int getMaxsamples() {
        return maxsamples_;
      }
      /**
       * <code>optional int32 maxsamples = 4;</code>
       */
      public Builder setMaxsamples(int value) {
        bitField0_ |= 0x00000008;
        maxsamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 maxsamples = 4;</code>
       */
      public Builder clearMaxsamples() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxsamples_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamill.stream.FieldInfo)
    }

    // @@protoc_insertion_point(class_scope:akamill.stream.FieldInfo)
    private static final com.akamai.akamill.stream.Stream.FieldInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.akamill.stream.Stream.FieldInfo();
    }

    public static com.akamai.akamill.stream.Stream.FieldInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FieldInfo>
        PARSER = new com.google.protobuf.AbstractParser<FieldInfo>() {
      public FieldInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FieldInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FieldInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FieldInfo> getParserForType() {
      return PARSER;
    }

    public com.akamai.akamill.stream.Stream.FieldInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StreamInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamill.stream.StreamInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional int32 version = 2;</code>
     */
    boolean hasVersion();
    /**
     * <code>optional int32 version = 2;</code>
     */
    int getVersion();

    /**
     * <code>optional int32 timestampidx = 3;</code>
     */
    boolean hasTimestampidx();
    /**
     * <code>optional int32 timestampidx = 3;</code>
     */
    int getTimestampidx();

    /**
     * <code>optional .akamill.stream.StreamInfo.WindowType windowtype = 4;</code>
     */
    boolean hasWindowtype();
    /**
     * <code>optional .akamill.stream.StreamInfo.WindowType windowtype = 4;</code>
     */
    com.akamai.akamill.stream.Stream.StreamInfo.WindowType getWindowtype();

    /**
     * <code>optional int32 windowsize = 5;</code>
     */
    boolean hasWindowsize();
    /**
     * <code>optional int32 windowsize = 5;</code>
     */
    int getWindowsize();

    /**
     * <code>optional int32 slotsize = 6;</code>
     */
    boolean hasSlotsize();
    /**
     * <code>optional int32 slotsize = 6;</code>
     */
    int getSlotsize();

    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> 
        getKeyfinfoList();
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    com.akamai.akamill.stream.Stream.FieldInfo getKeyfinfo(int index);
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    int getKeyfinfoCount();
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
        getKeyfinfoOrBuilderList();
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getKeyfinfoOrBuilder(
        int index);

    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> 
        getValfinfoList();
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    com.akamai.akamill.stream.Stream.FieldInfo getValfinfo(int index);
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    int getValfinfoCount();
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
        getValfinfoOrBuilderList();
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getValfinfoOrBuilder(
        int index);

    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> 
        getSamplefinfoList();
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    com.akamai.akamill.stream.Stream.FieldInfo getSamplefinfo(int index);
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    int getSamplefinfoCount();
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
        getSamplefinfoOrBuilderList();
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getSamplefinfoOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code akamill.stream.StreamInfo}
   */
  public  static final class StreamInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamill.stream.StreamInfo)
      StreamInfoOrBuilder {
    // Use StreamInfo.newBuilder() to construct.
    private StreamInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StreamInfo() {
      name_ = "";
      version_ = 0;
      timestampidx_ = 0;
      windowtype_ = 1;
      windowsize_ = 0;
      slotsize_ = 0;
      keyfinfo_ = java.util.Collections.emptyList();
      valfinfo_ = java.util.Collections.emptyList();
      samplefinfo_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StreamInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              version_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              timestampidx_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.akamai.akamill.stream.Stream.StreamInfo.WindowType value = com.akamai.akamill.stream.Stream.StreamInfo.WindowType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                windowtype_ = rawValue;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              windowsize_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              slotsize_ = input.readInt32();
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                keyfinfo_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldInfo>();
                mutable_bitField0_ |= 0x00000040;
              }
              keyfinfo_.add(
                  input.readMessage(com.akamai.akamill.stream.Stream.FieldInfo.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                valfinfo_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldInfo>();
                mutable_bitField0_ |= 0x00000080;
              }
              valfinfo_.add(
                  input.readMessage(com.akamai.akamill.stream.Stream.FieldInfo.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                samplefinfo_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldInfo>();
                mutable_bitField0_ |= 0x00000100;
              }
              samplefinfo_.add(
                  input.readMessage(com.akamai.akamill.stream.Stream.FieldInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          keyfinfo_ = java.util.Collections.unmodifiableList(keyfinfo_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          valfinfo_ = java.util.Collections.unmodifiableList(valfinfo_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          samplefinfo_ = java.util.Collections.unmodifiableList(samplefinfo_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.akamill.stream.Stream.StreamInfo.class, com.akamai.akamill.stream.Stream.StreamInfo.Builder.class);
    }

    /**
     * Protobuf enum {@code akamill.stream.StreamInfo.WindowType}
     */
    public enum WindowType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Currently not supported
       * </pre>
       *
       * <code>WINDOW_TYPE_SLIDING = 1;</code>
       */
      WINDOW_TYPE_SLIDING(1),
      /**
       * <code>WINDOW_TYPE_TUMBLING = 2;</code>
       */
      WINDOW_TYPE_TUMBLING(2),
      ;

      /**
       * <pre>
       * Currently not supported
       * </pre>
       *
       * <code>WINDOW_TYPE_SLIDING = 1;</code>
       */
      public static final int WINDOW_TYPE_SLIDING_VALUE = 1;
      /**
       * <code>WINDOW_TYPE_TUMBLING = 2;</code>
       */
      public static final int WINDOW_TYPE_TUMBLING_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WindowType valueOf(int value) {
        return forNumber(value);
      }

      public static WindowType forNumber(int value) {
        switch (value) {
          case 1: return WINDOW_TYPE_SLIDING;
          case 2: return WINDOW_TYPE_TUMBLING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WindowType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WindowType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WindowType>() {
              public WindowType findValueByNumber(int number) {
                return WindowType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.StreamInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final WindowType[] VALUES = values();

      public static WindowType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private WindowType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:akamill.stream.StreamInfo.WindowType)
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 2;
    private int version_;
    /**
     * <code>optional int32 version = 2;</code>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 version = 2;</code>
     */
    public int getVersion() {
      return version_;
    }

    public static final int TIMESTAMPIDX_FIELD_NUMBER = 3;
    private int timestampidx_;
    /**
     * <code>optional int32 timestampidx = 3;</code>
     */
    public boolean hasTimestampidx() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 timestampidx = 3;</code>
     */
    public int getTimestampidx() {
      return timestampidx_;
    }

    public static final int WINDOWTYPE_FIELD_NUMBER = 4;
    private int windowtype_;
    /**
     * <code>optional .akamill.stream.StreamInfo.WindowType windowtype = 4;</code>
     */
    public boolean hasWindowtype() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .akamill.stream.StreamInfo.WindowType windowtype = 4;</code>
     */
    public com.akamai.akamill.stream.Stream.StreamInfo.WindowType getWindowtype() {
      com.akamai.akamill.stream.Stream.StreamInfo.WindowType result = com.akamai.akamill.stream.Stream.StreamInfo.WindowType.valueOf(windowtype_);
      return result == null ? com.akamai.akamill.stream.Stream.StreamInfo.WindowType.WINDOW_TYPE_SLIDING : result;
    }

    public static final int WINDOWSIZE_FIELD_NUMBER = 5;
    private int windowsize_;
    /**
     * <code>optional int32 windowsize = 5;</code>
     */
    public boolean hasWindowsize() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 windowsize = 5;</code>
     */
    public int getWindowsize() {
      return windowsize_;
    }

    public static final int SLOTSIZE_FIELD_NUMBER = 6;
    private int slotsize_;
    /**
     * <code>optional int32 slotsize = 6;</code>
     */
    public boolean hasSlotsize() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 slotsize = 6;</code>
     */
    public int getSlotsize() {
      return slotsize_;
    }

    public static final int KEYFINFO_FIELD_NUMBER = 7;
    private java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> keyfinfo_;
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> getKeyfinfoList() {
      return keyfinfo_;
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
        getKeyfinfoOrBuilderList() {
      return keyfinfo_;
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    public int getKeyfinfoCount() {
      return keyfinfo_.size();
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldInfo getKeyfinfo(int index) {
      return keyfinfo_.get(index);
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getKeyfinfoOrBuilder(
        int index) {
      return keyfinfo_.get(index);
    }

    public static final int VALFINFO_FIELD_NUMBER = 8;
    private java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> valfinfo_;
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> getValfinfoList() {
      return valfinfo_;
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
        getValfinfoOrBuilderList() {
      return valfinfo_;
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    public int getValfinfoCount() {
      return valfinfo_.size();
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldInfo getValfinfo(int index) {
      return valfinfo_.get(index);
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getValfinfoOrBuilder(
        int index) {
      return valfinfo_.get(index);
    }

    public static final int SAMPLEFINFO_FIELD_NUMBER = 9;
    private java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> samplefinfo_;
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> getSamplefinfoList() {
      return samplefinfo_;
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
        getSamplefinfoOrBuilderList() {
      return samplefinfo_;
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    public int getSamplefinfoCount() {
      return samplefinfo_.size();
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldInfo getSamplefinfo(int index) {
      return samplefinfo_.get(index);
    }
    /**
     * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getSamplefinfoOrBuilder(
        int index) {
      return samplefinfo_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, timestampidx_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, windowtype_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, windowsize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, slotsize_);
      }
      for (int i = 0; i < keyfinfo_.size(); i++) {
        output.writeMessage(7, keyfinfo_.get(i));
      }
      for (int i = 0; i < valfinfo_.size(); i++) {
        output.writeMessage(8, valfinfo_.get(i));
      }
      for (int i = 0; i < samplefinfo_.size(); i++) {
        output.writeMessage(9, samplefinfo_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, timestampidx_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, windowtype_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, windowsize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, slotsize_);
      }
      for (int i = 0; i < keyfinfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, keyfinfo_.get(i));
      }
      for (int i = 0; i < valfinfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, valfinfo_.get(i));
      }
      for (int i = 0; i < samplefinfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, samplefinfo_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.akamill.stream.Stream.StreamInfo)) {
        return super.equals(obj);
      }
      com.akamai.akamill.stream.Stream.StreamInfo other = (com.akamai.akamill.stream.Stream.StreamInfo) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasVersion() == other.hasVersion());
      if (hasVersion()) {
        result = result && (getVersion()
            == other.getVersion());
      }
      result = result && (hasTimestampidx() == other.hasTimestampidx());
      if (hasTimestampidx()) {
        result = result && (getTimestampidx()
            == other.getTimestampidx());
      }
      result = result && (hasWindowtype() == other.hasWindowtype());
      if (hasWindowtype()) {
        result = result && windowtype_ == other.windowtype_;
      }
      result = result && (hasWindowsize() == other.hasWindowsize());
      if (hasWindowsize()) {
        result = result && (getWindowsize()
            == other.getWindowsize());
      }
      result = result && (hasSlotsize() == other.hasSlotsize());
      if (hasSlotsize()) {
        result = result && (getSlotsize()
            == other.getSlotsize());
      }
      result = result && getKeyfinfoList()
          .equals(other.getKeyfinfoList());
      result = result && getValfinfoList()
          .equals(other.getValfinfoList());
      result = result && getSamplefinfoList()
          .equals(other.getSamplefinfoList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion();
      }
      if (hasTimestampidx()) {
        hash = (37 * hash) + TIMESTAMPIDX_FIELD_NUMBER;
        hash = (53 * hash) + getTimestampidx();
      }
      if (hasWindowtype()) {
        hash = (37 * hash) + WINDOWTYPE_FIELD_NUMBER;
        hash = (53 * hash) + windowtype_;
      }
      if (hasWindowsize()) {
        hash = (37 * hash) + WINDOWSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getWindowsize();
      }
      if (hasSlotsize()) {
        hash = (37 * hash) + SLOTSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getSlotsize();
      }
      if (getKeyfinfoCount() > 0) {
        hash = (37 * hash) + KEYFINFO_FIELD_NUMBER;
        hash = (53 * hash) + getKeyfinfoList().hashCode();
      }
      if (getValfinfoCount() > 0) {
        hash = (37 * hash) + VALFINFO_FIELD_NUMBER;
        hash = (53 * hash) + getValfinfoList().hashCode();
      }
      if (getSamplefinfoCount() > 0) {
        hash = (37 * hash) + SAMPLEFINFO_FIELD_NUMBER;
        hash = (53 * hash) + getSamplefinfoList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.akamill.stream.Stream.StreamInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.akamill.stream.Stream.StreamInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code akamill.stream.StreamInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamill.stream.StreamInfo)
        com.akamai.akamill.stream.Stream.StreamInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.akamill.stream.Stream.StreamInfo.class, com.akamai.akamill.stream.Stream.StreamInfo.Builder.class);
      }

      // Construct using com.akamai.akamill.stream.Stream.StreamInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getKeyfinfoFieldBuilder();
          getValfinfoFieldBuilder();
          getSamplefinfoFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        timestampidx_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        windowtype_ = 1;
        bitField0_ = (bitField0_ & ~0x00000008);
        windowsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        slotsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (keyfinfoBuilder_ == null) {
          keyfinfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          keyfinfoBuilder_.clear();
        }
        if (valfinfoBuilder_ == null) {
          valfinfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          valfinfoBuilder_.clear();
        }
        if (samplefinfoBuilder_ == null) {
          samplefinfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          samplefinfoBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamInfo_descriptor;
      }

      public com.akamai.akamill.stream.Stream.StreamInfo getDefaultInstanceForType() {
        return com.akamai.akamill.stream.Stream.StreamInfo.getDefaultInstance();
      }

      public com.akamai.akamill.stream.Stream.StreamInfo build() {
        com.akamai.akamill.stream.Stream.StreamInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.akamill.stream.Stream.StreamInfo buildPartial() {
        com.akamai.akamill.stream.Stream.StreamInfo result = new com.akamai.akamill.stream.Stream.StreamInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timestampidx_ = timestampidx_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.windowtype_ = windowtype_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.windowsize_ = windowsize_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.slotsize_ = slotsize_;
        if (keyfinfoBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            keyfinfo_ = java.util.Collections.unmodifiableList(keyfinfo_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.keyfinfo_ = keyfinfo_;
        } else {
          result.keyfinfo_ = keyfinfoBuilder_.build();
        }
        if (valfinfoBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            valfinfo_ = java.util.Collections.unmodifiableList(valfinfo_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.valfinfo_ = valfinfo_;
        } else {
          result.valfinfo_ = valfinfoBuilder_.build();
        }
        if (samplefinfoBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            samplefinfo_ = java.util.Collections.unmodifiableList(samplefinfo_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.samplefinfo_ = samplefinfo_;
        } else {
          result.samplefinfo_ = samplefinfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.akamill.stream.Stream.StreamInfo) {
          return mergeFrom((com.akamai.akamill.stream.Stream.StreamInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.akamill.stream.Stream.StreamInfo other) {
        if (other == com.akamai.akamill.stream.Stream.StreamInfo.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasTimestampidx()) {
          setTimestampidx(other.getTimestampidx());
        }
        if (other.hasWindowtype()) {
          setWindowtype(other.getWindowtype());
        }
        if (other.hasWindowsize()) {
          setWindowsize(other.getWindowsize());
        }
        if (other.hasSlotsize()) {
          setSlotsize(other.getSlotsize());
        }
        if (keyfinfoBuilder_ == null) {
          if (!other.keyfinfo_.isEmpty()) {
            if (keyfinfo_.isEmpty()) {
              keyfinfo_ = other.keyfinfo_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureKeyfinfoIsMutable();
              keyfinfo_.addAll(other.keyfinfo_);
            }
            onChanged();
          }
        } else {
          if (!other.keyfinfo_.isEmpty()) {
            if (keyfinfoBuilder_.isEmpty()) {
              keyfinfoBuilder_.dispose();
              keyfinfoBuilder_ = null;
              keyfinfo_ = other.keyfinfo_;
              bitField0_ = (bitField0_ & ~0x00000040);
              keyfinfoBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getKeyfinfoFieldBuilder() : null;
            } else {
              keyfinfoBuilder_.addAllMessages(other.keyfinfo_);
            }
          }
        }
        if (valfinfoBuilder_ == null) {
          if (!other.valfinfo_.isEmpty()) {
            if (valfinfo_.isEmpty()) {
              valfinfo_ = other.valfinfo_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureValfinfoIsMutable();
              valfinfo_.addAll(other.valfinfo_);
            }
            onChanged();
          }
        } else {
          if (!other.valfinfo_.isEmpty()) {
            if (valfinfoBuilder_.isEmpty()) {
              valfinfoBuilder_.dispose();
              valfinfoBuilder_ = null;
              valfinfo_ = other.valfinfo_;
              bitField0_ = (bitField0_ & ~0x00000080);
              valfinfoBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getValfinfoFieldBuilder() : null;
            } else {
              valfinfoBuilder_.addAllMessages(other.valfinfo_);
            }
          }
        }
        if (samplefinfoBuilder_ == null) {
          if (!other.samplefinfo_.isEmpty()) {
            if (samplefinfo_.isEmpty()) {
              samplefinfo_ = other.samplefinfo_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureSamplefinfoIsMutable();
              samplefinfo_.addAll(other.samplefinfo_);
            }
            onChanged();
          }
        } else {
          if (!other.samplefinfo_.isEmpty()) {
            if (samplefinfoBuilder_.isEmpty()) {
              samplefinfoBuilder_.dispose();
              samplefinfoBuilder_ = null;
              samplefinfo_ = other.samplefinfo_;
              bitField0_ = (bitField0_ & ~0x00000100);
              samplefinfoBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSamplefinfoFieldBuilder() : null;
            } else {
              samplefinfoBuilder_.addAllMessages(other.samplefinfo_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.akamill.stream.Stream.StreamInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.akamill.stream.Stream.StreamInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private int version_ ;
      /**
       * <code>optional int32 version = 2;</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 version = 2;</code>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional int32 version = 2;</code>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000002;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 version = 2;</code>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        version_ = 0;
        onChanged();
        return this;
      }

      private int timestampidx_ ;
      /**
       * <code>optional int32 timestampidx = 3;</code>
       */
      public boolean hasTimestampidx() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 timestampidx = 3;</code>
       */
      public int getTimestampidx() {
        return timestampidx_;
      }
      /**
       * <code>optional int32 timestampidx = 3;</code>
       */
      public Builder setTimestampidx(int value) {
        bitField0_ |= 0x00000004;
        timestampidx_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 timestampidx = 3;</code>
       */
      public Builder clearTimestampidx() {
        bitField0_ = (bitField0_ & ~0x00000004);
        timestampidx_ = 0;
        onChanged();
        return this;
      }

      private int windowtype_ = 1;
      /**
       * <code>optional .akamill.stream.StreamInfo.WindowType windowtype = 4;</code>
       */
      public boolean hasWindowtype() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .akamill.stream.StreamInfo.WindowType windowtype = 4;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamInfo.WindowType getWindowtype() {
        com.akamai.akamill.stream.Stream.StreamInfo.WindowType result = com.akamai.akamill.stream.Stream.StreamInfo.WindowType.valueOf(windowtype_);
        return result == null ? com.akamai.akamill.stream.Stream.StreamInfo.WindowType.WINDOW_TYPE_SLIDING : result;
      }
      /**
       * <code>optional .akamill.stream.StreamInfo.WindowType windowtype = 4;</code>
       */
      public Builder setWindowtype(com.akamai.akamill.stream.Stream.StreamInfo.WindowType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        windowtype_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .akamill.stream.StreamInfo.WindowType windowtype = 4;</code>
       */
      public Builder clearWindowtype() {
        bitField0_ = (bitField0_ & ~0x00000008);
        windowtype_ = 1;
        onChanged();
        return this;
      }

      private int windowsize_ ;
      /**
       * <code>optional int32 windowsize = 5;</code>
       */
      public boolean hasWindowsize() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 windowsize = 5;</code>
       */
      public int getWindowsize() {
        return windowsize_;
      }
      /**
       * <code>optional int32 windowsize = 5;</code>
       */
      public Builder setWindowsize(int value) {
        bitField0_ |= 0x00000010;
        windowsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 windowsize = 5;</code>
       */
      public Builder clearWindowsize() {
        bitField0_ = (bitField0_ & ~0x00000010);
        windowsize_ = 0;
        onChanged();
        return this;
      }

      private int slotsize_ ;
      /**
       * <code>optional int32 slotsize = 6;</code>
       */
      public boolean hasSlotsize() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 slotsize = 6;</code>
       */
      public int getSlotsize() {
        return slotsize_;
      }
      /**
       * <code>optional int32 slotsize = 6;</code>
       */
      public Builder setSlotsize(int value) {
        bitField0_ |= 0x00000020;
        slotsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 slotsize = 6;</code>
       */
      public Builder clearSlotsize() {
        bitField0_ = (bitField0_ & ~0x00000020);
        slotsize_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> keyfinfo_ =
        java.util.Collections.emptyList();
      private void ensureKeyfinfoIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          keyfinfo_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldInfo>(keyfinfo_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> keyfinfoBuilder_;

      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> getKeyfinfoList() {
        if (keyfinfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(keyfinfo_);
        } else {
          return keyfinfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public int getKeyfinfoCount() {
        if (keyfinfoBuilder_ == null) {
          return keyfinfo_.size();
        } else {
          return keyfinfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo getKeyfinfo(int index) {
        if (keyfinfoBuilder_ == null) {
          return keyfinfo_.get(index);
        } else {
          return keyfinfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder setKeyfinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (keyfinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyfinfoIsMutable();
          keyfinfo_.set(index, value);
          onChanged();
        } else {
          keyfinfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder setKeyfinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (keyfinfoBuilder_ == null) {
          ensureKeyfinfoIsMutable();
          keyfinfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          keyfinfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder addKeyfinfo(com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (keyfinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyfinfoIsMutable();
          keyfinfo_.add(value);
          onChanged();
        } else {
          keyfinfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder addKeyfinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (keyfinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyfinfoIsMutable();
          keyfinfo_.add(index, value);
          onChanged();
        } else {
          keyfinfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder addKeyfinfo(
          com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (keyfinfoBuilder_ == null) {
          ensureKeyfinfoIsMutable();
          keyfinfo_.add(builderForValue.build());
          onChanged();
        } else {
          keyfinfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder addKeyfinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (keyfinfoBuilder_ == null) {
          ensureKeyfinfoIsMutable();
          keyfinfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          keyfinfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder addAllKeyfinfo(
          java.lang.Iterable<? extends com.akamai.akamill.stream.Stream.FieldInfo> values) {
        if (keyfinfoBuilder_ == null) {
          ensureKeyfinfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, keyfinfo_);
          onChanged();
        } else {
          keyfinfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder clearKeyfinfo() {
        if (keyfinfoBuilder_ == null) {
          keyfinfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          keyfinfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public Builder removeKeyfinfo(int index) {
        if (keyfinfoBuilder_ == null) {
          ensureKeyfinfoIsMutable();
          keyfinfo_.remove(index);
          onChanged();
        } else {
          keyfinfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder getKeyfinfoBuilder(
          int index) {
        return getKeyfinfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getKeyfinfoOrBuilder(
          int index) {
        if (keyfinfoBuilder_ == null) {
          return keyfinfo_.get(index);  } else {
          return keyfinfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
           getKeyfinfoOrBuilderList() {
        if (keyfinfoBuilder_ != null) {
          return keyfinfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(keyfinfo_);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder addKeyfinfoBuilder() {
        return getKeyfinfoFieldBuilder().addBuilder(
            com.akamai.akamill.stream.Stream.FieldInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder addKeyfinfoBuilder(
          int index) {
        return getKeyfinfoFieldBuilder().addBuilder(
            index, com.akamai.akamill.stream.Stream.FieldInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo keyfinfo = 7;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo.Builder> 
           getKeyfinfoBuilderList() {
        return getKeyfinfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
          getKeyfinfoFieldBuilder() {
        if (keyfinfoBuilder_ == null) {
          keyfinfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder>(
                  keyfinfo_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          keyfinfo_ = null;
        }
        return keyfinfoBuilder_;
      }

      private java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> valfinfo_ =
        java.util.Collections.emptyList();
      private void ensureValfinfoIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          valfinfo_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldInfo>(valfinfo_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> valfinfoBuilder_;

      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> getValfinfoList() {
        if (valfinfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valfinfo_);
        } else {
          return valfinfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public int getValfinfoCount() {
        if (valfinfoBuilder_ == null) {
          return valfinfo_.size();
        } else {
          return valfinfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo getValfinfo(int index) {
        if (valfinfoBuilder_ == null) {
          return valfinfo_.get(index);
        } else {
          return valfinfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder setValfinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (valfinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValfinfoIsMutable();
          valfinfo_.set(index, value);
          onChanged();
        } else {
          valfinfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder setValfinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (valfinfoBuilder_ == null) {
          ensureValfinfoIsMutable();
          valfinfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          valfinfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder addValfinfo(com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (valfinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValfinfoIsMutable();
          valfinfo_.add(value);
          onChanged();
        } else {
          valfinfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder addValfinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (valfinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValfinfoIsMutable();
          valfinfo_.add(index, value);
          onChanged();
        } else {
          valfinfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder addValfinfo(
          com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (valfinfoBuilder_ == null) {
          ensureValfinfoIsMutable();
          valfinfo_.add(builderForValue.build());
          onChanged();
        } else {
          valfinfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder addValfinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (valfinfoBuilder_ == null) {
          ensureValfinfoIsMutable();
          valfinfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          valfinfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder addAllValfinfo(
          java.lang.Iterable<? extends com.akamai.akamill.stream.Stream.FieldInfo> values) {
        if (valfinfoBuilder_ == null) {
          ensureValfinfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, valfinfo_);
          onChanged();
        } else {
          valfinfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder clearValfinfo() {
        if (valfinfoBuilder_ == null) {
          valfinfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          valfinfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public Builder removeValfinfo(int index) {
        if (valfinfoBuilder_ == null) {
          ensureValfinfoIsMutable();
          valfinfo_.remove(index);
          onChanged();
        } else {
          valfinfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder getValfinfoBuilder(
          int index) {
        return getValfinfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getValfinfoOrBuilder(
          int index) {
        if (valfinfoBuilder_ == null) {
          return valfinfo_.get(index);  } else {
          return valfinfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
           getValfinfoOrBuilderList() {
        if (valfinfoBuilder_ != null) {
          return valfinfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valfinfo_);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder addValfinfoBuilder() {
        return getValfinfoFieldBuilder().addBuilder(
            com.akamai.akamill.stream.Stream.FieldInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder addValfinfoBuilder(
          int index) {
        return getValfinfoFieldBuilder().addBuilder(
            index, com.akamai.akamill.stream.Stream.FieldInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo valfinfo = 8;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo.Builder> 
           getValfinfoBuilderList() {
        return getValfinfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
          getValfinfoFieldBuilder() {
        if (valfinfoBuilder_ == null) {
          valfinfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder>(
                  valfinfo_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          valfinfo_ = null;
        }
        return valfinfoBuilder_;
      }

      private java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> samplefinfo_ =
        java.util.Collections.emptyList();
      private void ensureSamplefinfoIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          samplefinfo_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldInfo>(samplefinfo_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> samplefinfoBuilder_;

      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo> getSamplefinfoList() {
        if (samplefinfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samplefinfo_);
        } else {
          return samplefinfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public int getSamplefinfoCount() {
        if (samplefinfoBuilder_ == null) {
          return samplefinfo_.size();
        } else {
          return samplefinfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo getSamplefinfo(int index) {
        if (samplefinfoBuilder_ == null) {
          return samplefinfo_.get(index);
        } else {
          return samplefinfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder setSamplefinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (samplefinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplefinfoIsMutable();
          samplefinfo_.set(index, value);
          onChanged();
        } else {
          samplefinfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder setSamplefinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (samplefinfoBuilder_ == null) {
          ensureSamplefinfoIsMutable();
          samplefinfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplefinfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder addSamplefinfo(com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (samplefinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplefinfoIsMutable();
          samplefinfo_.add(value);
          onChanged();
        } else {
          samplefinfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder addSamplefinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo value) {
        if (samplefinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplefinfoIsMutable();
          samplefinfo_.add(index, value);
          onChanged();
        } else {
          samplefinfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder addSamplefinfo(
          com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (samplefinfoBuilder_ == null) {
          ensureSamplefinfoIsMutable();
          samplefinfo_.add(builderForValue.build());
          onChanged();
        } else {
          samplefinfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder addSamplefinfo(
          int index, com.akamai.akamill.stream.Stream.FieldInfo.Builder builderForValue) {
        if (samplefinfoBuilder_ == null) {
          ensureSamplefinfoIsMutable();
          samplefinfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplefinfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder addAllSamplefinfo(
          java.lang.Iterable<? extends com.akamai.akamill.stream.Stream.FieldInfo> values) {
        if (samplefinfoBuilder_ == null) {
          ensureSamplefinfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samplefinfo_);
          onChanged();
        } else {
          samplefinfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder clearSamplefinfo() {
        if (samplefinfoBuilder_ == null) {
          samplefinfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          samplefinfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public Builder removeSamplefinfo(int index) {
        if (samplefinfoBuilder_ == null) {
          ensureSamplefinfoIsMutable();
          samplefinfo_.remove(index);
          onChanged();
        } else {
          samplefinfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder getSamplefinfoBuilder(
          int index) {
        return getSamplefinfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfoOrBuilder getSamplefinfoOrBuilder(
          int index) {
        if (samplefinfoBuilder_ == null) {
          return samplefinfo_.get(index);  } else {
          return samplefinfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
           getSamplefinfoOrBuilderList() {
        if (samplefinfoBuilder_ != null) {
          return samplefinfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samplefinfo_);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder addSamplefinfoBuilder() {
        return getSamplefinfoFieldBuilder().addBuilder(
            com.akamai.akamill.stream.Stream.FieldInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldInfo.Builder addSamplefinfoBuilder(
          int index) {
        return getSamplefinfoFieldBuilder().addBuilder(
            index, com.akamai.akamill.stream.Stream.FieldInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldInfo samplefinfo = 9;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldInfo.Builder> 
           getSamplefinfoBuilderList() {
        return getSamplefinfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder> 
          getSamplefinfoFieldBuilder() {
        if (samplefinfoBuilder_ == null) {
          samplefinfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.akamai.akamill.stream.Stream.FieldInfo, com.akamai.akamill.stream.Stream.FieldInfo.Builder, com.akamai.akamill.stream.Stream.FieldInfoOrBuilder>(
                  samplefinfo_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          samplefinfo_ = null;
        }
        return samplefinfoBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamill.stream.StreamInfo)
    }

    // @@protoc_insertion_point(class_scope:akamill.stream.StreamInfo)
    private static final com.akamai.akamill.stream.Stream.StreamInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.akamill.stream.Stream.StreamInfo();
    }

    public static com.akamai.akamill.stream.Stream.StreamInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StreamInfo>
        PARSER = new com.google.protobuf.AbstractParser<StreamInfo>() {
      public StreamInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StreamInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StreamInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StreamInfo> getParserForType() {
      return PARSER;
    }

    public com.akamai.akamill.stream.Stream.StreamInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SampleDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamill.stream.SampleData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    java.util.List<com.akamai.akamill.stream.Stream.FieldData> 
        getSampleList();
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    com.akamai.akamill.stream.Stream.FieldData getSample(int index);
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    int getSampleCount();
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
        getSampleOrBuilderList();
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    com.akamai.akamill.stream.Stream.FieldDataOrBuilder getSampleOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code akamill.stream.SampleData}
   */
  public  static final class SampleData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamill.stream.SampleData)
      SampleDataOrBuilder {
    // Use SampleData.newBuilder() to construct.
    private SampleData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SampleData() {
      sample_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SampleData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                sample_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldData>();
                mutable_bitField0_ |= 0x00000001;
              }
              sample_.add(
                  input.readMessage(com.akamai.akamill.stream.Stream.FieldData.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          sample_ = java.util.Collections.unmodifiableList(sample_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_SampleData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_SampleData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.akamill.stream.Stream.SampleData.class, com.akamai.akamill.stream.Stream.SampleData.Builder.class);
    }

    public static final int SAMPLE_FIELD_NUMBER = 1;
    private java.util.List<com.akamai.akamill.stream.Stream.FieldData> sample_;
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    public java.util.List<com.akamai.akamill.stream.Stream.FieldData> getSampleList() {
      return sample_;
    }
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
        getSampleOrBuilderList() {
      return sample_;
    }
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    public int getSampleCount() {
      return sample_.size();
    }
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldData getSample(int index) {
      return sample_.get(index);
    }
    /**
     * <code>repeated .akamill.stream.FieldData sample = 1;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldDataOrBuilder getSampleOrBuilder(
        int index) {
      return sample_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getSampleCount(); i++) {
        if (!getSample(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sample_.size(); i++) {
        output.writeMessage(1, sample_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sample_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sample_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.akamill.stream.Stream.SampleData)) {
        return super.equals(obj);
      }
      com.akamai.akamill.stream.Stream.SampleData other = (com.akamai.akamill.stream.Stream.SampleData) obj;

      boolean result = true;
      result = result && getSampleList()
          .equals(other.getSampleList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSampleCount() > 0) {
        hash = (37 * hash) + SAMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getSampleList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.akamill.stream.Stream.SampleData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.SampleData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.akamill.stream.Stream.SampleData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code akamill.stream.SampleData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamill.stream.SampleData)
        com.akamai.akamill.stream.Stream.SampleDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_SampleData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_SampleData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.akamill.stream.Stream.SampleData.class, com.akamai.akamill.stream.Stream.SampleData.Builder.class);
      }

      // Construct using com.akamai.akamill.stream.Stream.SampleData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSampleFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (sampleBuilder_ == null) {
          sample_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sampleBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_SampleData_descriptor;
      }

      public com.akamai.akamill.stream.Stream.SampleData getDefaultInstanceForType() {
        return com.akamai.akamill.stream.Stream.SampleData.getDefaultInstance();
      }

      public com.akamai.akamill.stream.Stream.SampleData build() {
        com.akamai.akamill.stream.Stream.SampleData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.akamill.stream.Stream.SampleData buildPartial() {
        com.akamai.akamill.stream.Stream.SampleData result = new com.akamai.akamill.stream.Stream.SampleData(this);
        int from_bitField0_ = bitField0_;
        if (sampleBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            sample_ = java.util.Collections.unmodifiableList(sample_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sample_ = sample_;
        } else {
          result.sample_ = sampleBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.akamill.stream.Stream.SampleData) {
          return mergeFrom((com.akamai.akamill.stream.Stream.SampleData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.akamill.stream.Stream.SampleData other) {
        if (other == com.akamai.akamill.stream.Stream.SampleData.getDefaultInstance()) return this;
        if (sampleBuilder_ == null) {
          if (!other.sample_.isEmpty()) {
            if (sample_.isEmpty()) {
              sample_ = other.sample_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSampleIsMutable();
              sample_.addAll(other.sample_);
            }
            onChanged();
          }
        } else {
          if (!other.sample_.isEmpty()) {
            if (sampleBuilder_.isEmpty()) {
              sampleBuilder_.dispose();
              sampleBuilder_ = null;
              sample_ = other.sample_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sampleBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSampleFieldBuilder() : null;
            } else {
              sampleBuilder_.addAllMessages(other.sample_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getSampleCount(); i++) {
          if (!getSample(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.akamill.stream.Stream.SampleData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.akamill.stream.Stream.SampleData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.akamai.akamill.stream.Stream.FieldData> sample_ =
        java.util.Collections.emptyList();
      private void ensureSampleIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          sample_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldData>(sample_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder> sampleBuilder_;

      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldData> getSampleList() {
        if (sampleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sample_);
        } else {
          return sampleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public int getSampleCount() {
        if (sampleBuilder_ == null) {
          return sample_.size();
        } else {
          return sampleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData getSample(int index) {
        if (sampleBuilder_ == null) {
          return sample_.get(index);
        } else {
          return sampleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder setSample(
          int index, com.akamai.akamill.stream.Stream.FieldData value) {
        if (sampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleIsMutable();
          sample_.set(index, value);
          onChanged();
        } else {
          sampleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder setSample(
          int index, com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          sample_.set(index, builderForValue.build());
          onChanged();
        } else {
          sampleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder addSample(com.akamai.akamill.stream.Stream.FieldData value) {
        if (sampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleIsMutable();
          sample_.add(value);
          onChanged();
        } else {
          sampleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder addSample(
          int index, com.akamai.akamill.stream.Stream.FieldData value) {
        if (sampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleIsMutable();
          sample_.add(index, value);
          onChanged();
        } else {
          sampleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder addSample(
          com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          sample_.add(builderForValue.build());
          onChanged();
        } else {
          sampleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder addSample(
          int index, com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          sample_.add(index, builderForValue.build());
          onChanged();
        } else {
          sampleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder addAllSample(
          java.lang.Iterable<? extends com.akamai.akamill.stream.Stream.FieldData> values) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sample_);
          onChanged();
        } else {
          sampleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder clearSample() {
        if (sampleBuilder_ == null) {
          sample_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sampleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public Builder removeSample(int index) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          sample_.remove(index);
          onChanged();
        } else {
          sampleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder getSampleBuilder(
          int index) {
        return getSampleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldDataOrBuilder getSampleOrBuilder(
          int index) {
        if (sampleBuilder_ == null) {
          return sample_.get(index);  } else {
          return sampleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
           getSampleOrBuilderList() {
        if (sampleBuilder_ != null) {
          return sampleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sample_);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder addSampleBuilder() {
        return getSampleFieldBuilder().addBuilder(
            com.akamai.akamill.stream.Stream.FieldData.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder addSampleBuilder(
          int index) {
        return getSampleFieldBuilder().addBuilder(
            index, com.akamai.akamill.stream.Stream.FieldData.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldData sample = 1;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldData.Builder> 
           getSampleBuilderList() {
        return getSampleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
          getSampleFieldBuilder() {
        if (sampleBuilder_ == null) {
          sampleBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder>(
                  sample_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          sample_ = null;
        }
        return sampleBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamill.stream.SampleData)
    }

    // @@protoc_insertion_point(class_scope:akamill.stream.SampleData)
    private static final com.akamai.akamill.stream.Stream.SampleData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.akamill.stream.Stream.SampleData();
    }

    public static com.akamai.akamill.stream.Stream.SampleData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SampleData>
        PARSER = new com.google.protobuf.AbstractParser<SampleData>() {
      public SampleData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new SampleData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SampleData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SampleData> getParserForType() {
      return PARSER;
    }

    public com.akamai.akamill.stream.Stream.SampleData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StreamMsgOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamill.stream.StreamMsg)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    java.util.List<com.akamai.akamill.stream.Stream.FieldData> 
        getKeyfieldsList();
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    com.akamai.akamill.stream.Stream.FieldData getKeyfields(int index);
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    int getKeyfieldsCount();
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
        getKeyfieldsOrBuilderList();
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    com.akamai.akamill.stream.Stream.FieldDataOrBuilder getKeyfieldsOrBuilder(
        int index);

    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    java.util.List<com.akamai.akamill.stream.Stream.FieldData> 
        getValfieldsList();
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    com.akamai.akamill.stream.Stream.FieldData getValfields(int index);
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    int getValfieldsCount();
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
        getValfieldsOrBuilderList();
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    com.akamai.akamill.stream.Stream.FieldDataOrBuilder getValfieldsOrBuilder(
        int index);

    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    java.util.List<com.akamai.akamill.stream.Stream.SampleData> 
        getSamplefieldsList();
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    com.akamai.akamill.stream.Stream.SampleData getSamplefields(int index);
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    int getSamplefieldsCount();
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    java.util.List<? extends com.akamai.akamill.stream.Stream.SampleDataOrBuilder> 
        getSamplefieldsOrBuilderList();
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    com.akamai.akamill.stream.Stream.SampleDataOrBuilder getSamplefieldsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code akamill.stream.StreamMsg}
   */
  public  static final class StreamMsg extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamill.stream.StreamMsg)
      StreamMsgOrBuilder {
    // Use StreamMsg.newBuilder() to construct.
    private StreamMsg(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StreamMsg() {
      keyfields_ = java.util.Collections.emptyList();
      valfields_ = java.util.Collections.emptyList();
      samplefields_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StreamMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                keyfields_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldData>();
                mutable_bitField0_ |= 0x00000001;
              }
              keyfields_.add(
                  input.readMessage(com.akamai.akamill.stream.Stream.FieldData.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                valfields_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldData>();
                mutable_bitField0_ |= 0x00000002;
              }
              valfields_.add(
                  input.readMessage(com.akamai.akamill.stream.Stream.FieldData.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                samplefields_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.SampleData>();
                mutable_bitField0_ |= 0x00000004;
              }
              samplefields_.add(
                  input.readMessage(com.akamai.akamill.stream.Stream.SampleData.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          keyfields_ = java.util.Collections.unmodifiableList(keyfields_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          valfields_ = java.util.Collections.unmodifiableList(valfields_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          samplefields_ = java.util.Collections.unmodifiableList(samplefields_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.akamill.stream.Stream.StreamMsg.class, com.akamai.akamill.stream.Stream.StreamMsg.Builder.class);
    }

    public static final int KEYFIELDS_FIELD_NUMBER = 1;
    private java.util.List<com.akamai.akamill.stream.Stream.FieldData> keyfields_;
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    public java.util.List<com.akamai.akamill.stream.Stream.FieldData> getKeyfieldsList() {
      return keyfields_;
    }
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
        getKeyfieldsOrBuilderList() {
      return keyfields_;
    }
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    public int getKeyfieldsCount() {
      return keyfields_.size();
    }
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldData getKeyfields(int index) {
      return keyfields_.get(index);
    }
    /**
     * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldDataOrBuilder getKeyfieldsOrBuilder(
        int index) {
      return keyfields_.get(index);
    }

    public static final int VALFIELDS_FIELD_NUMBER = 2;
    private java.util.List<com.akamai.akamill.stream.Stream.FieldData> valfields_;
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    public java.util.List<com.akamai.akamill.stream.Stream.FieldData> getValfieldsList() {
      return valfields_;
    }
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
        getValfieldsOrBuilderList() {
      return valfields_;
    }
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    public int getValfieldsCount() {
      return valfields_.size();
    }
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldData getValfields(int index) {
      return valfields_.get(index);
    }
    /**
     * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
     */
    public com.akamai.akamill.stream.Stream.FieldDataOrBuilder getValfieldsOrBuilder(
        int index) {
      return valfields_.get(index);
    }

    public static final int SAMPLEFIELDS_FIELD_NUMBER = 3;
    private java.util.List<com.akamai.akamill.stream.Stream.SampleData> samplefields_;
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    public java.util.List<com.akamai.akamill.stream.Stream.SampleData> getSamplefieldsList() {
      return samplefields_;
    }
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    public java.util.List<? extends com.akamai.akamill.stream.Stream.SampleDataOrBuilder> 
        getSamplefieldsOrBuilderList() {
      return samplefields_;
    }
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    public int getSamplefieldsCount() {
      return samplefields_.size();
    }
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    public com.akamai.akamill.stream.Stream.SampleData getSamplefields(int index) {
      return samplefields_.get(index);
    }
    /**
     * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
     */
    public com.akamai.akamill.stream.Stream.SampleDataOrBuilder getSamplefieldsOrBuilder(
        int index) {
      return samplefields_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getKeyfieldsCount(); i++) {
        if (!getKeyfields(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getValfieldsCount(); i++) {
        if (!getValfields(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSamplefieldsCount(); i++) {
        if (!getSamplefields(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < keyfields_.size(); i++) {
        output.writeMessage(1, keyfields_.get(i));
      }
      for (int i = 0; i < valfields_.size(); i++) {
        output.writeMessage(2, valfields_.get(i));
      }
      for (int i = 0; i < samplefields_.size(); i++) {
        output.writeMessage(3, samplefields_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < keyfields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, keyfields_.get(i));
      }
      for (int i = 0; i < valfields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, valfields_.get(i));
      }
      for (int i = 0; i < samplefields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, samplefields_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.akamill.stream.Stream.StreamMsg)) {
        return super.equals(obj);
      }
      com.akamai.akamill.stream.Stream.StreamMsg other = (com.akamai.akamill.stream.Stream.StreamMsg) obj;

      boolean result = true;
      result = result && getKeyfieldsList()
          .equals(other.getKeyfieldsList());
      result = result && getValfieldsList()
          .equals(other.getValfieldsList());
      result = result && getSamplefieldsList()
          .equals(other.getSamplefieldsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getKeyfieldsCount() > 0) {
        hash = (37 * hash) + KEYFIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getKeyfieldsList().hashCode();
      }
      if (getValfieldsCount() > 0) {
        hash = (37 * hash) + VALFIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getValfieldsList().hashCode();
      }
      if (getSamplefieldsCount() > 0) {
        hash = (37 * hash) + SAMPLEFIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getSamplefieldsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.akamill.stream.Stream.StreamMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.akamill.stream.Stream.StreamMsg prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code akamill.stream.StreamMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamill.stream.StreamMsg)
        com.akamai.akamill.stream.Stream.StreamMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.akamill.stream.Stream.StreamMsg.class, com.akamai.akamill.stream.Stream.StreamMsg.Builder.class);
      }

      // Construct using com.akamai.akamill.stream.Stream.StreamMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getKeyfieldsFieldBuilder();
          getValfieldsFieldBuilder();
          getSamplefieldsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (keyfieldsBuilder_ == null) {
          keyfields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          keyfieldsBuilder_.clear();
        }
        if (valfieldsBuilder_ == null) {
          valfields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          valfieldsBuilder_.clear();
        }
        if (samplefieldsBuilder_ == null) {
          samplefields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          samplefieldsBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamMsg_descriptor;
      }

      public com.akamai.akamill.stream.Stream.StreamMsg getDefaultInstanceForType() {
        return com.akamai.akamill.stream.Stream.StreamMsg.getDefaultInstance();
      }

      public com.akamai.akamill.stream.Stream.StreamMsg build() {
        com.akamai.akamill.stream.Stream.StreamMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.akamill.stream.Stream.StreamMsg buildPartial() {
        com.akamai.akamill.stream.Stream.StreamMsg result = new com.akamai.akamill.stream.Stream.StreamMsg(this);
        int from_bitField0_ = bitField0_;
        if (keyfieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            keyfields_ = java.util.Collections.unmodifiableList(keyfields_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.keyfields_ = keyfields_;
        } else {
          result.keyfields_ = keyfieldsBuilder_.build();
        }
        if (valfieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            valfields_ = java.util.Collections.unmodifiableList(valfields_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.valfields_ = valfields_;
        } else {
          result.valfields_ = valfieldsBuilder_.build();
        }
        if (samplefieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            samplefields_ = java.util.Collections.unmodifiableList(samplefields_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.samplefields_ = samplefields_;
        } else {
          result.samplefields_ = samplefieldsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.akamill.stream.Stream.StreamMsg) {
          return mergeFrom((com.akamai.akamill.stream.Stream.StreamMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.akamill.stream.Stream.StreamMsg other) {
        if (other == com.akamai.akamill.stream.Stream.StreamMsg.getDefaultInstance()) return this;
        if (keyfieldsBuilder_ == null) {
          if (!other.keyfields_.isEmpty()) {
            if (keyfields_.isEmpty()) {
              keyfields_ = other.keyfields_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureKeyfieldsIsMutable();
              keyfields_.addAll(other.keyfields_);
            }
            onChanged();
          }
        } else {
          if (!other.keyfields_.isEmpty()) {
            if (keyfieldsBuilder_.isEmpty()) {
              keyfieldsBuilder_.dispose();
              keyfieldsBuilder_ = null;
              keyfields_ = other.keyfields_;
              bitField0_ = (bitField0_ & ~0x00000001);
              keyfieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getKeyfieldsFieldBuilder() : null;
            } else {
              keyfieldsBuilder_.addAllMessages(other.keyfields_);
            }
          }
        }
        if (valfieldsBuilder_ == null) {
          if (!other.valfields_.isEmpty()) {
            if (valfields_.isEmpty()) {
              valfields_ = other.valfields_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureValfieldsIsMutable();
              valfields_.addAll(other.valfields_);
            }
            onChanged();
          }
        } else {
          if (!other.valfields_.isEmpty()) {
            if (valfieldsBuilder_.isEmpty()) {
              valfieldsBuilder_.dispose();
              valfieldsBuilder_ = null;
              valfields_ = other.valfields_;
              bitField0_ = (bitField0_ & ~0x00000002);
              valfieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getValfieldsFieldBuilder() : null;
            } else {
              valfieldsBuilder_.addAllMessages(other.valfields_);
            }
          }
        }
        if (samplefieldsBuilder_ == null) {
          if (!other.samplefields_.isEmpty()) {
            if (samplefields_.isEmpty()) {
              samplefields_ = other.samplefields_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSamplefieldsIsMutable();
              samplefields_.addAll(other.samplefields_);
            }
            onChanged();
          }
        } else {
          if (!other.samplefields_.isEmpty()) {
            if (samplefieldsBuilder_.isEmpty()) {
              samplefieldsBuilder_.dispose();
              samplefieldsBuilder_ = null;
              samplefields_ = other.samplefields_;
              bitField0_ = (bitField0_ & ~0x00000004);
              samplefieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSamplefieldsFieldBuilder() : null;
            } else {
              samplefieldsBuilder_.addAllMessages(other.samplefields_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getKeyfieldsCount(); i++) {
          if (!getKeyfields(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getValfieldsCount(); i++) {
          if (!getValfields(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getSamplefieldsCount(); i++) {
          if (!getSamplefields(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.akamill.stream.Stream.StreamMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.akamill.stream.Stream.StreamMsg) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.akamai.akamill.stream.Stream.FieldData> keyfields_ =
        java.util.Collections.emptyList();
      private void ensureKeyfieldsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          keyfields_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldData>(keyfields_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder> keyfieldsBuilder_;

      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldData> getKeyfieldsList() {
        if (keyfieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(keyfields_);
        } else {
          return keyfieldsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public int getKeyfieldsCount() {
        if (keyfieldsBuilder_ == null) {
          return keyfields_.size();
        } else {
          return keyfieldsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData getKeyfields(int index) {
        if (keyfieldsBuilder_ == null) {
          return keyfields_.get(index);
        } else {
          return keyfieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder setKeyfields(
          int index, com.akamai.akamill.stream.Stream.FieldData value) {
        if (keyfieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyfieldsIsMutable();
          keyfields_.set(index, value);
          onChanged();
        } else {
          keyfieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder setKeyfields(
          int index, com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (keyfieldsBuilder_ == null) {
          ensureKeyfieldsIsMutable();
          keyfields_.set(index, builderForValue.build());
          onChanged();
        } else {
          keyfieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder addKeyfields(com.akamai.akamill.stream.Stream.FieldData value) {
        if (keyfieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyfieldsIsMutable();
          keyfields_.add(value);
          onChanged();
        } else {
          keyfieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder addKeyfields(
          int index, com.akamai.akamill.stream.Stream.FieldData value) {
        if (keyfieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyfieldsIsMutable();
          keyfields_.add(index, value);
          onChanged();
        } else {
          keyfieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder addKeyfields(
          com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (keyfieldsBuilder_ == null) {
          ensureKeyfieldsIsMutable();
          keyfields_.add(builderForValue.build());
          onChanged();
        } else {
          keyfieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder addKeyfields(
          int index, com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (keyfieldsBuilder_ == null) {
          ensureKeyfieldsIsMutable();
          keyfields_.add(index, builderForValue.build());
          onChanged();
        } else {
          keyfieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder addAllKeyfields(
          java.lang.Iterable<? extends com.akamai.akamill.stream.Stream.FieldData> values) {
        if (keyfieldsBuilder_ == null) {
          ensureKeyfieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, keyfields_);
          onChanged();
        } else {
          keyfieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder clearKeyfields() {
        if (keyfieldsBuilder_ == null) {
          keyfields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          keyfieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public Builder removeKeyfields(int index) {
        if (keyfieldsBuilder_ == null) {
          ensureKeyfieldsIsMutable();
          keyfields_.remove(index);
          onChanged();
        } else {
          keyfieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder getKeyfieldsBuilder(
          int index) {
        return getKeyfieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldDataOrBuilder getKeyfieldsOrBuilder(
          int index) {
        if (keyfieldsBuilder_ == null) {
          return keyfields_.get(index);  } else {
          return keyfieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
           getKeyfieldsOrBuilderList() {
        if (keyfieldsBuilder_ != null) {
          return keyfieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(keyfields_);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder addKeyfieldsBuilder() {
        return getKeyfieldsFieldBuilder().addBuilder(
            com.akamai.akamill.stream.Stream.FieldData.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder addKeyfieldsBuilder(
          int index) {
        return getKeyfieldsFieldBuilder().addBuilder(
            index, com.akamai.akamill.stream.Stream.FieldData.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldData keyfields = 1;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldData.Builder> 
           getKeyfieldsBuilderList() {
        return getKeyfieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
          getKeyfieldsFieldBuilder() {
        if (keyfieldsBuilder_ == null) {
          keyfieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder>(
                  keyfields_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          keyfields_ = null;
        }
        return keyfieldsBuilder_;
      }

      private java.util.List<com.akamai.akamill.stream.Stream.FieldData> valfields_ =
        java.util.Collections.emptyList();
      private void ensureValfieldsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          valfields_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.FieldData>(valfields_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder> valfieldsBuilder_;

      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldData> getValfieldsList() {
        if (valfieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valfields_);
        } else {
          return valfieldsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public int getValfieldsCount() {
        if (valfieldsBuilder_ == null) {
          return valfields_.size();
        } else {
          return valfieldsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData getValfields(int index) {
        if (valfieldsBuilder_ == null) {
          return valfields_.get(index);
        } else {
          return valfieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder setValfields(
          int index, com.akamai.akamill.stream.Stream.FieldData value) {
        if (valfieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValfieldsIsMutable();
          valfields_.set(index, value);
          onChanged();
        } else {
          valfieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder setValfields(
          int index, com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (valfieldsBuilder_ == null) {
          ensureValfieldsIsMutable();
          valfields_.set(index, builderForValue.build());
          onChanged();
        } else {
          valfieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder addValfields(com.akamai.akamill.stream.Stream.FieldData value) {
        if (valfieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValfieldsIsMutable();
          valfields_.add(value);
          onChanged();
        } else {
          valfieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder addValfields(
          int index, com.akamai.akamill.stream.Stream.FieldData value) {
        if (valfieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValfieldsIsMutable();
          valfields_.add(index, value);
          onChanged();
        } else {
          valfieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder addValfields(
          com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (valfieldsBuilder_ == null) {
          ensureValfieldsIsMutable();
          valfields_.add(builderForValue.build());
          onChanged();
        } else {
          valfieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder addValfields(
          int index, com.akamai.akamill.stream.Stream.FieldData.Builder builderForValue) {
        if (valfieldsBuilder_ == null) {
          ensureValfieldsIsMutable();
          valfields_.add(index, builderForValue.build());
          onChanged();
        } else {
          valfieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder addAllValfields(
          java.lang.Iterable<? extends com.akamai.akamill.stream.Stream.FieldData> values) {
        if (valfieldsBuilder_ == null) {
          ensureValfieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, valfields_);
          onChanged();
        } else {
          valfieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder clearValfields() {
        if (valfieldsBuilder_ == null) {
          valfields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          valfieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public Builder removeValfields(int index) {
        if (valfieldsBuilder_ == null) {
          ensureValfieldsIsMutable();
          valfields_.remove(index);
          onChanged();
        } else {
          valfieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder getValfieldsBuilder(
          int index) {
        return getValfieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldDataOrBuilder getValfieldsOrBuilder(
          int index) {
        if (valfieldsBuilder_ == null) {
          return valfields_.get(index);  } else {
          return valfieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public java.util.List<? extends com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
           getValfieldsOrBuilderList() {
        if (valfieldsBuilder_ != null) {
          return valfieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valfields_);
        }
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder addValfieldsBuilder() {
        return getValfieldsFieldBuilder().addBuilder(
            com.akamai.akamill.stream.Stream.FieldData.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public com.akamai.akamill.stream.Stream.FieldData.Builder addValfieldsBuilder(
          int index) {
        return getValfieldsFieldBuilder().addBuilder(
            index, com.akamai.akamill.stream.Stream.FieldData.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.FieldData valfields = 2;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.FieldData.Builder> 
           getValfieldsBuilderList() {
        return getValfieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder> 
          getValfieldsFieldBuilder() {
        if (valfieldsBuilder_ == null) {
          valfieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.akamai.akamill.stream.Stream.FieldData, com.akamai.akamill.stream.Stream.FieldData.Builder, com.akamai.akamill.stream.Stream.FieldDataOrBuilder>(
                  valfields_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          valfields_ = null;
        }
        return valfieldsBuilder_;
      }

      private java.util.List<com.akamai.akamill.stream.Stream.SampleData> samplefields_ =
        java.util.Collections.emptyList();
      private void ensureSamplefieldsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          samplefields_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.SampleData>(samplefields_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.SampleData, com.akamai.akamill.stream.Stream.SampleData.Builder, com.akamai.akamill.stream.Stream.SampleDataOrBuilder> samplefieldsBuilder_;

      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.SampleData> getSamplefieldsList() {
        if (samplefieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samplefields_);
        } else {
          return samplefieldsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public int getSamplefieldsCount() {
        if (samplefieldsBuilder_ == null) {
          return samplefields_.size();
        } else {
          return samplefieldsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.SampleData getSamplefields(int index) {
        if (samplefieldsBuilder_ == null) {
          return samplefields_.get(index);
        } else {
          return samplefieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder setSamplefields(
          int index, com.akamai.akamill.stream.Stream.SampleData value) {
        if (samplefieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplefieldsIsMutable();
          samplefields_.set(index, value);
          onChanged();
        } else {
          samplefieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder setSamplefields(
          int index, com.akamai.akamill.stream.Stream.SampleData.Builder builderForValue) {
        if (samplefieldsBuilder_ == null) {
          ensureSamplefieldsIsMutable();
          samplefields_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplefieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder addSamplefields(com.akamai.akamill.stream.Stream.SampleData value) {
        if (samplefieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplefieldsIsMutable();
          samplefields_.add(value);
          onChanged();
        } else {
          samplefieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder addSamplefields(
          int index, com.akamai.akamill.stream.Stream.SampleData value) {
        if (samplefieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplefieldsIsMutable();
          samplefields_.add(index, value);
          onChanged();
        } else {
          samplefieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder addSamplefields(
          com.akamai.akamill.stream.Stream.SampleData.Builder builderForValue) {
        if (samplefieldsBuilder_ == null) {
          ensureSamplefieldsIsMutable();
          samplefields_.add(builderForValue.build());
          onChanged();
        } else {
          samplefieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder addSamplefields(
          int index, com.akamai.akamill.stream.Stream.SampleData.Builder builderForValue) {
        if (samplefieldsBuilder_ == null) {
          ensureSamplefieldsIsMutable();
          samplefields_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplefieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder addAllSamplefields(
          java.lang.Iterable<? extends com.akamai.akamill.stream.Stream.SampleData> values) {
        if (samplefieldsBuilder_ == null) {
          ensureSamplefieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samplefields_);
          onChanged();
        } else {
          samplefieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder clearSamplefields() {
        if (samplefieldsBuilder_ == null) {
          samplefields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          samplefieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public Builder removeSamplefields(int index) {
        if (samplefieldsBuilder_ == null) {
          ensureSamplefieldsIsMutable();
          samplefields_.remove(index);
          onChanged();
        } else {
          samplefieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.SampleData.Builder getSamplefieldsBuilder(
          int index) {
        return getSamplefieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.SampleDataOrBuilder getSamplefieldsOrBuilder(
          int index) {
        if (samplefieldsBuilder_ == null) {
          return samplefields_.get(index);  } else {
          return samplefieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public java.util.List<? extends com.akamai.akamill.stream.Stream.SampleDataOrBuilder> 
           getSamplefieldsOrBuilderList() {
        if (samplefieldsBuilder_ != null) {
          return samplefieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samplefields_);
        }
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.SampleData.Builder addSamplefieldsBuilder() {
        return getSamplefieldsFieldBuilder().addBuilder(
            com.akamai.akamill.stream.Stream.SampleData.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.SampleData.Builder addSamplefieldsBuilder(
          int index) {
        return getSamplefieldsFieldBuilder().addBuilder(
            index, com.akamai.akamill.stream.Stream.SampleData.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.SampleData samplefields = 3;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.SampleData.Builder> 
           getSamplefieldsBuilderList() {
        return getSamplefieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.SampleData, com.akamai.akamill.stream.Stream.SampleData.Builder, com.akamai.akamill.stream.Stream.SampleDataOrBuilder> 
          getSamplefieldsFieldBuilder() {
        if (samplefieldsBuilder_ == null) {
          samplefieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.akamai.akamill.stream.Stream.SampleData, com.akamai.akamill.stream.Stream.SampleData.Builder, com.akamai.akamill.stream.Stream.SampleDataOrBuilder>(
                  samplefields_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          samplefields_ = null;
        }
        return samplefieldsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamill.stream.StreamMsg)
    }

    // @@protoc_insertion_point(class_scope:akamill.stream.StreamMsg)
    private static final com.akamai.akamill.stream.Stream.StreamMsg DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.akamill.stream.Stream.StreamMsg();
    }

    public static com.akamai.akamill.stream.Stream.StreamMsg getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StreamMsg>
        PARSER = new com.google.protobuf.AbstractParser<StreamMsg>() {
      public StreamMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StreamMsg(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StreamMsg> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StreamMsg> getParserForType() {
      return PARSER;
    }

    public com.akamai.akamill.stream.Stream.StreamMsg getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StreamBundleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:akamill.stream.StreamBundle)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional uint32 version = 2;</code>
     */
    boolean hasVersion();
    /**
     * <code>optional uint32 version = 2;</code>
     */
    int getVersion();

    /**
     * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
     */
    boolean hasStreaminfo();
    /**
     * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
     */
    com.akamai.akamill.stream.Stream.StreamInfo getStreaminfo();
    /**
     * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
     */
    com.akamai.akamill.stream.Stream.StreamInfoOrBuilder getStreaminfoOrBuilder();

    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    java.util.List<com.akamai.akamill.stream.Stream.StreamMsg> 
        getRowList();
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    com.akamai.akamill.stream.Stream.StreamMsg getRow(int index);
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    int getRowCount();
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    java.util.List<? extends com.akamai.akamill.stream.Stream.StreamMsgOrBuilder> 
        getRowOrBuilderList();
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    com.akamai.akamill.stream.Stream.StreamMsgOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code akamill.stream.StreamBundle}
   */
  public  static final class StreamBundle extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:akamill.stream.StreamBundle)
      StreamBundleOrBuilder {
    // Use StreamBundle.newBuilder() to construct.
    private StreamBundle(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StreamBundle() {
      name_ = "";
      version_ = 0;
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StreamBundle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              version_ = input.readUInt32();
              break;
            }
            case 26: {
              com.akamai.akamill.stream.Stream.StreamInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = streaminfo_.toBuilder();
              }
              streaminfo_ = input.readMessage(com.akamai.akamill.stream.Stream.StreamInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(streaminfo_);
                streaminfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                row_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.StreamMsg>();
                mutable_bitField0_ |= 0x00000008;
              }
              row_.add(
                  input.readMessage(com.akamai.akamill.stream.Stream.StreamMsg.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamBundle_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamBundle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.akamai.akamill.stream.Stream.StreamBundle.class, com.akamai.akamill.stream.Stream.StreamBundle.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 2;
    private int version_;
    /**
     * <code>optional uint32 version = 2;</code>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 version = 2;</code>
     */
    public int getVersion() {
      return version_;
    }

    public static final int STREAMINFO_FIELD_NUMBER = 3;
    private com.akamai.akamill.stream.Stream.StreamInfo streaminfo_;
    /**
     * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
     */
    public boolean hasStreaminfo() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
     */
    public com.akamai.akamill.stream.Stream.StreamInfo getStreaminfo() {
      return streaminfo_ == null ? com.akamai.akamill.stream.Stream.StreamInfo.getDefaultInstance() : streaminfo_;
    }
    /**
     * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
     */
    public com.akamai.akamill.stream.Stream.StreamInfoOrBuilder getStreaminfoOrBuilder() {
      return streaminfo_ == null ? com.akamai.akamill.stream.Stream.StreamInfo.getDefaultInstance() : streaminfo_;
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<com.akamai.akamill.stream.Stream.StreamMsg> row_;
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    public java.util.List<com.akamai.akamill.stream.Stream.StreamMsg> getRowList() {
      return row_;
    }
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    public java.util.List<? extends com.akamai.akamill.stream.Stream.StreamMsgOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    public com.akamai.akamill.stream.Stream.StreamMsg getRow(int index) {
      return row_.get(index);
    }
    /**
     * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
     */
    public com.akamai.akamill.stream.Stream.StreamMsgOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getRowCount(); i++) {
        if (!getRow(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getStreaminfo());
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getStreaminfo());
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.akamai.akamill.stream.Stream.StreamBundle)) {
        return super.equals(obj);
      }
      com.akamai.akamill.stream.Stream.StreamBundle other = (com.akamai.akamill.stream.Stream.StreamBundle) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasVersion() == other.hasVersion());
      if (hasVersion()) {
        result = result && (getVersion()
            == other.getVersion());
      }
      result = result && (hasStreaminfo() == other.hasStreaminfo());
      if (hasStreaminfo()) {
        result = result && getStreaminfo()
            .equals(other.getStreaminfo());
      }
      result = result && getRowList()
          .equals(other.getRowList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion();
      }
      if (hasStreaminfo()) {
        hash = (37 * hash) + STREAMINFO_FIELD_NUMBER;
        hash = (53 * hash) + getStreaminfo().hashCode();
      }
      if (getRowCount() > 0) {
        hash = (37 * hash) + ROW_FIELD_NUMBER;
        hash = (53 * hash) + getRowList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.akamai.akamill.stream.Stream.StreamBundle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.akamai.akamill.stream.Stream.StreamBundle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akamai.akamill.stream.Stream.StreamBundle prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code akamill.stream.StreamBundle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:akamill.stream.StreamBundle)
        com.akamai.akamill.stream.Stream.StreamBundleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamBundle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamBundle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.akamai.akamill.stream.Stream.StreamBundle.class, com.akamai.akamill.stream.Stream.StreamBundle.Builder.class);
      }

      // Construct using com.akamai.akamill.stream.Stream.StreamBundle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStreaminfoFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (streaminfoBuilder_ == null) {
          streaminfo_ = null;
        } else {
          streaminfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.akamai.akamill.stream.Stream.internal_static_akamill_stream_StreamBundle_descriptor;
      }

      public com.akamai.akamill.stream.Stream.StreamBundle getDefaultInstanceForType() {
        return com.akamai.akamill.stream.Stream.StreamBundle.getDefaultInstance();
      }

      public com.akamai.akamill.stream.Stream.StreamBundle build() {
        com.akamai.akamill.stream.Stream.StreamBundle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.akamai.akamill.stream.Stream.StreamBundle buildPartial() {
        com.akamai.akamill.stream.Stream.StreamBundle result = new com.akamai.akamill.stream.Stream.StreamBundle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (streaminfoBuilder_ == null) {
          result.streaminfo_ = streaminfo_;
        } else {
          result.streaminfo_ = streaminfoBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.akamai.akamill.stream.Stream.StreamBundle) {
          return mergeFrom((com.akamai.akamill.stream.Stream.StreamBundle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.akamai.akamill.stream.Stream.StreamBundle other) {
        if (other == com.akamai.akamill.stream.Stream.StreamBundle.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasStreaminfo()) {
          mergeStreaminfo(other.getStreaminfo());
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000008);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getRowCount(); i++) {
          if (!getRow(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.akamai.akamill.stream.Stream.StreamBundle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.akamai.akamill.stream.Stream.StreamBundle) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private int version_ ;
      /**
       * <code>optional uint32 version = 2;</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 version = 2;</code>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional uint32 version = 2;</code>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000002;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 version = 2;</code>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        version_ = 0;
        onChanged();
        return this;
      }

      private com.akamai.akamill.stream.Stream.StreamInfo streaminfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.akamai.akamill.stream.Stream.StreamInfo, com.akamai.akamill.stream.Stream.StreamInfo.Builder, com.akamai.akamill.stream.Stream.StreamInfoOrBuilder> streaminfoBuilder_;
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      public boolean hasStreaminfo() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamInfo getStreaminfo() {
        if (streaminfoBuilder_ == null) {
          return streaminfo_ == null ? com.akamai.akamill.stream.Stream.StreamInfo.getDefaultInstance() : streaminfo_;
        } else {
          return streaminfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      public Builder setStreaminfo(com.akamai.akamill.stream.Stream.StreamInfo value) {
        if (streaminfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          streaminfo_ = value;
          onChanged();
        } else {
          streaminfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      public Builder setStreaminfo(
          com.akamai.akamill.stream.Stream.StreamInfo.Builder builderForValue) {
        if (streaminfoBuilder_ == null) {
          streaminfo_ = builderForValue.build();
          onChanged();
        } else {
          streaminfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      public Builder mergeStreaminfo(com.akamai.akamill.stream.Stream.StreamInfo value) {
        if (streaminfoBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              streaminfo_ != null &&
              streaminfo_ != com.akamai.akamill.stream.Stream.StreamInfo.getDefaultInstance()) {
            streaminfo_ =
              com.akamai.akamill.stream.Stream.StreamInfo.newBuilder(streaminfo_).mergeFrom(value).buildPartial();
          } else {
            streaminfo_ = value;
          }
          onChanged();
        } else {
          streaminfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      public Builder clearStreaminfo() {
        if (streaminfoBuilder_ == null) {
          streaminfo_ = null;
          onChanged();
        } else {
          streaminfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamInfo.Builder getStreaminfoBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getStreaminfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamInfoOrBuilder getStreaminfoOrBuilder() {
        if (streaminfoBuilder_ != null) {
          return streaminfoBuilder_.getMessageOrBuilder();
        } else {
          return streaminfo_ == null ?
              com.akamai.akamill.stream.Stream.StreamInfo.getDefaultInstance() : streaminfo_;
        }
      }
      /**
       * <code>optional .akamill.stream.StreamInfo streaminfo = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.akamai.akamill.stream.Stream.StreamInfo, com.akamai.akamill.stream.Stream.StreamInfo.Builder, com.akamai.akamill.stream.Stream.StreamInfoOrBuilder> 
          getStreaminfoFieldBuilder() {
        if (streaminfoBuilder_ == null) {
          streaminfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.akamai.akamill.stream.Stream.StreamInfo, com.akamai.akamill.stream.Stream.StreamInfo.Builder, com.akamai.akamill.stream.Stream.StreamInfoOrBuilder>(
                  getStreaminfo(),
                  getParentForChildren(),
                  isClean());
          streaminfo_ = null;
        }
        return streaminfoBuilder_;
      }

      private java.util.List<com.akamai.akamill.stream.Stream.StreamMsg> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          row_ = new java.util.ArrayList<com.akamai.akamill.stream.Stream.StreamMsg>(row_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.StreamMsg, com.akamai.akamill.stream.Stream.StreamMsg.Builder, com.akamai.akamill.stream.Stream.StreamMsgOrBuilder> rowBuilder_;

      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.StreamMsg> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamMsg getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder setRow(
          int index, com.akamai.akamill.stream.Stream.StreamMsg value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder setRow(
          int index, com.akamai.akamill.stream.Stream.StreamMsg.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder addRow(com.akamai.akamill.stream.Stream.StreamMsg value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder addRow(
          int index, com.akamai.akamill.stream.Stream.StreamMsg value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder addRow(
          com.akamai.akamill.stream.Stream.StreamMsg.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder addRow(
          int index, com.akamai.akamill.stream.Stream.StreamMsg.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends com.akamai.akamill.stream.Stream.StreamMsg> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamMsg.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamMsgOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public java.util.List<? extends com.akamai.akamill.stream.Stream.StreamMsgOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamMsg.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            com.akamai.akamill.stream.Stream.StreamMsg.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public com.akamai.akamill.stream.Stream.StreamMsg.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, com.akamai.akamill.stream.Stream.StreamMsg.getDefaultInstance());
      }
      /**
       * <code>repeated .akamill.stream.StreamMsg row = 4;</code>
       */
      public java.util.List<com.akamai.akamill.stream.Stream.StreamMsg.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.akamai.akamill.stream.Stream.StreamMsg, com.akamai.akamill.stream.Stream.StreamMsg.Builder, com.akamai.akamill.stream.Stream.StreamMsgOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.akamai.akamill.stream.Stream.StreamMsg, com.akamai.akamill.stream.Stream.StreamMsg.Builder, com.akamai.akamill.stream.Stream.StreamMsgOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:akamill.stream.StreamBundle)
    }

    // @@protoc_insertion_point(class_scope:akamill.stream.StreamBundle)
    private static final com.akamai.akamill.stream.Stream.StreamBundle DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.akamai.akamill.stream.Stream.StreamBundle();
    }

    public static com.akamai.akamill.stream.Stream.StreamBundle getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StreamBundle>
        PARSER = new com.google.protobuf.AbstractParser<StreamBundle>() {
      public StreamBundle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StreamBundle(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StreamBundle> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StreamBundle> getParserForType() {
      return PARSER;
    }

    public com.akamai.akamill.stream.Stream.StreamBundle getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamill_stream_HashInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamill_stream_HashInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamill_stream_HyperLogLog_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamill_stream_HyperLogLog_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamill_stream_FieldData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamill_stream_FieldData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamill_stream_FieldInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamill_stream_FieldInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamill_stream_StreamInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamill_stream_StreamInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamill_stream_SampleData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamill_stream_SampleData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamill_stream_StreamMsg_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamill_stream_StreamMsg_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_akamill_stream_StreamBundle_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_akamill_stream_StreamBundle_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014stream.proto\022\016akamill.stream\032\rnetwork." +
      "proto\"\235\001\n\010HashInfo\022/\n\006hashid\030\001 \002(\0162\037.aka" +
      "mill.stream.HashInfo.HashId\022\014\n\004seed\030\002 \003(" +
      "\004\"R\n\006HashId\022\022\n\016HASH_JENKINS32\020\001\022\022\n\016HASH_" +
      "JENKINS64\020\002\022\017\n\013HASH_CITY32\020\003\022\017\n\013HASH_CIT" +
      "Y64\020\004\"\212\001\n\013HyperLogLog\022\023\n\013nprefixbits\030\001 \002" +
      "(\r\022\022\n\nnregisters\030\002 \002(\r\022\020\n\010knearest\030\003 \002(\r" +
      "\022\024\n\014registerfile\030\006 \002(\014\022*\n\010hashinfo\030\007 \002(\013" +
      "2\030.akamill.stream.HashInfo\"\307\001\n\tFieldData" +
      "\022\014\n\004intf\030\001 \001(\005\022\r\n\005uintf\030\002 \001(\r\022\016\n\006int64f\030",
      "\003 \001(\003\022\017\n\007uint64f\030\004 \001(\004\022&\n\005addrf\030\005 \001(\0132\027." +
      "akamai.network.Address\022\014\n\004strf\030\006 \001(\t\022)\n\004" +
      "hllf\030\007 \001(\0132\033.akamill.stream.HyperLogLog\022" +
      "\r\n\005blobf\030\010 \001(\014\022\014\n\004dblf\030\t \001(\001\"\255\004\n\tFieldIn" +
      "fo\022\014\n\004name\030\001 \001(\t\0226\n\005dtype\030\002 \001(\0162\'.akamil" +
      "l.stream.FieldInfo.FieldDataType\0227\n\007aggt" +
      "ype\030\003 \001(\0162&.akamill.stream.FieldInfo.Fie" +
      "ldAggType\022\022\n\nmaxsamples\030\004 \001(\005\"\317\001\n\rFieldD" +
      "ataType\022\020\n\014F_DATA_INT32\020\001\022\021\n\rF_DATA_UINT" +
      "32\020\002\022\020\n\014F_DATA_INT64\020\003\022\021\n\rF_DATA_UINT64\020",
      "\004\022\r\n\tF_DATA_IP\020\005\022\016\n\nF_DATA_STR\020\006\022\017\n\013F_DA" +
      "TA_TIME\020\007\022\016\n\nF_DATA_HLL\020\010\022\017\n\013F_DATA_BLOB" +
      "\020\t\022\021\n\rF_DATA_DOUBLE\020\n\022\020\n\014F_DATA_INVAL\020\013\"" +
      "\272\001\n\014FieldAggType\022\016\n\nF_AGG_NONE\020\001\022\r\n\tF_AG" +
      "G_SUM\020\002\022\016\n\nF_AGG_DIFF\020\003\022\r\n\tF_AGG_MAX\020\004\022\r" +
      "\n\tF_AGG_MIN\020\005\022\014\n\010F_AGG_OR\020\006\022\r\n\tF_AGG_AND" +
      "\020\007\022\r\n\tF_AGG_XOR\020\010\022\022\n\016F_AGG_RANDSWAP\020\t\022\016\n" +
      "\nF_AGG_SWAP\020\n\022\r\n\tF_AGG_HLL\020\013\"\355\002\n\nStreamI" +
      "nfo\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\005\022\024\n\014ti" +
      "mestampidx\030\003 \001(\005\0229\n\nwindowtype\030\004 \001(\0162%.a",
      "kamill.stream.StreamInfo.WindowType\022\022\n\nw" +
      "indowsize\030\005 \001(\005\022\020\n\010slotsize\030\006 \001(\005\022+\n\010key" +
      "finfo\030\007 \003(\0132\031.akamill.stream.FieldInfo\022+" +
      "\n\010valfinfo\030\010 \003(\0132\031.akamill.stream.FieldI" +
      "nfo\022.\n\013samplefinfo\030\t \003(\0132\031.akamill.strea" +
      "m.FieldInfo\"?\n\nWindowType\022\027\n\023WINDOW_TYPE" +
      "_SLIDING\020\001\022\030\n\024WINDOW_TYPE_TUMBLING\020\002\"7\n\n" +
      "SampleData\022)\n\006sample\030\001 \003(\0132\031.akamill.str" +
      "eam.FieldData\"\231\001\n\tStreamMsg\022,\n\tkeyfields" +
      "\030\001 \003(\0132\031.akamill.stream.FieldData\022,\n\tval",
      "fields\030\002 \003(\0132\031.akamill.stream.FieldData\022" +
      "0\n\014samplefields\030\003 \003(\0132\032.akamill.stream.S" +
      "ampleData\"\205\001\n\014StreamBundle\022\014\n\004name\030\001 \001(\t" +
      "\022\017\n\007version\030\002 \001(\r\022.\n\nstreaminfo\030\003 \001(\0132\032." +
      "akamill.stream.StreamInfo\022&\n\003row\030\004 \003(\0132\031" +
      ".akamill.stream.StreamMsgB\033\n\031com.akamai." +
      "akamill.stream"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.akamai.network.Network.getDescriptor(),
        }, assigner);
    internal_static_akamill_stream_HashInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_akamill_stream_HashInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamill_stream_HashInfo_descriptor,
        new java.lang.String[] { "Hashid", "Seed", });
    internal_static_akamill_stream_HyperLogLog_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_akamill_stream_HyperLogLog_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamill_stream_HyperLogLog_descriptor,
        new java.lang.String[] { "Nprefixbits", "Nregisters", "Knearest", "Registerfile", "Hashinfo", });
    internal_static_akamill_stream_FieldData_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_akamill_stream_FieldData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamill_stream_FieldData_descriptor,
        new java.lang.String[] { "Intf", "Uintf", "Int64F", "Uint64F", "Addrf", "Strf", "Hllf", "Blobf", "Dblf", });
    internal_static_akamill_stream_FieldInfo_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_akamill_stream_FieldInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamill_stream_FieldInfo_descriptor,
        new java.lang.String[] { "Name", "Dtype", "Aggtype", "Maxsamples", });
    internal_static_akamill_stream_StreamInfo_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_akamill_stream_StreamInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamill_stream_StreamInfo_descriptor,
        new java.lang.String[] { "Name", "Version", "Timestampidx", "Windowtype", "Windowsize", "Slotsize", "Keyfinfo", "Valfinfo", "Samplefinfo", });
    internal_static_akamill_stream_SampleData_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_akamill_stream_SampleData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamill_stream_SampleData_descriptor,
        new java.lang.String[] { "Sample", });
    internal_static_akamill_stream_StreamMsg_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_akamill_stream_StreamMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamill_stream_StreamMsg_descriptor,
        new java.lang.String[] { "Keyfields", "Valfields", "Samplefields", });
    internal_static_akamill_stream_StreamBundle_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_akamill_stream_StreamBundle_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_akamill_stream_StreamBundle_descriptor,
        new java.lang.String[] { "Name", "Version", "Streaminfo", "Row", });
    com.akamai.network.Network.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
